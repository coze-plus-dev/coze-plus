/*
 * Copyright 2025 coze-plus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: user.go
//
// Generated by this command:
//
//	mockgen -destination ../../../internal/mock/crossdomain/crossuser/crossuser.go --package mockCrossUser -source user.go
//

// Package mockCrossUser is a generated GoMock package.
package mockCrossUser

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	crossuser "github.com/coze-dev/coze-studio/backend/crossdomain/user"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
	isgomock struct{}
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUser) CreateUser(ctx context.Context, req *crossuser.CreateUserRequest) (*crossuser.EntityUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, req)
	ret0, _ := ret[0].(*crossuser.EntityUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserMockRecorder) CreateUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUser)(nil).CreateUser), ctx, req)
}

// GetUserSpaceList mocks base method.
func (m *MockUser) GetUserSpaceList(ctx context.Context, userID int64) ([]*crossuser.EntitySpace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSpaceList", ctx, userID)
	ret0, _ := ret[0].([]*crossuser.EntitySpace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSpaceList indicates an expected call of GetUserSpaceList.
func (mr *MockUserMockRecorder) GetUserSpaceList(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSpaceList", reflect.TypeOf((*MockUser)(nil).GetUserSpaceList), ctx, userID)
}

// ListUsers mocks base method.
func (m *MockUser) ListUsers(ctx context.Context, req *crossuser.ListUsersRequest) (*crossuser.ListUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, req)
	ret0, _ := ret[0].(*crossuser.ListUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockUserMockRecorder) ListUsers(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockUser)(nil).ListUsers), ctx, req)
}

// ResetUserPassword mocks base method.
func (m *MockUser) ResetUserPassword(ctx context.Context, email, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetUserPassword", ctx, email, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetUserPassword indicates an expected call of ResetUserPassword.
func (mr *MockUserMockRecorder) ResetUserPassword(ctx, email, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetUserPassword", reflect.TypeOf((*MockUser)(nil).ResetUserPassword), ctx, email, newPassword)
}

// UpdateUserStatus mocks base method.
func (m *MockUser) UpdateUserStatus(ctx context.Context, req *crossuser.UpdateUserStatusRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserStatus", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserStatus indicates an expected call of UpdateUserStatus.
func (mr *MockUserMockRecorder) UpdateUserStatus(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserStatus", reflect.TypeOf((*MockUser)(nil).UpdateUserStatus), ctx, req)
}
