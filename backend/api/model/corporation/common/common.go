/*
 * Copyright 2025 coze-plus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package common

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

// 企业类型枚举
type CorporationType int64

const (
	// 集团
	CorporationType_GROUP CorporationType = 1
	// 公司
	CorporationType_COMPANY CorporationType = 2
	// 分公司
	CorporationType_BRANCH CorporationType = 3
)

func (p CorporationType) String() string {
	switch p {
	case CorporationType_GROUP:
		return "GROUP"
	case CorporationType_COMPANY:
		return "COMPANY"
	case CorporationType_BRANCH:
		return "BRANCH"
	}
	return "<UNSET>"
}

func CorporationTypeFromString(s string) (CorporationType, error) {
	switch s {
	case "GROUP":
		return CorporationType_GROUP, nil
	case "COMPANY":
		return CorporationType_COMPANY, nil
	case "BRANCH":
		return CorporationType_BRANCH, nil
	}
	return CorporationType(0), fmt.Errorf("not a valid CorporationType string")
}

func CorporationTypePtr(v CorporationType) *CorporationType { return &v }
func (p *CorporationType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = CorporationType(result.Int64)
	return
}

func (p *CorporationType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 数据来源枚举
type DataSource int64

const (
	// 企业微信
	DataSource_ENTERPRISE_WECHAT DataSource = 1
	// 钉钉
	DataSource_DINGTALK DataSource = 2
	// 飞书
	DataSource_FEISHU DataSource = 3
	// 手动创建
	DataSource_MANUAL DataSource = 4
)

func (p DataSource) String() string {
	switch p {
	case DataSource_ENTERPRISE_WECHAT:
		return "ENTERPRISE_WECHAT"
	case DataSource_DINGTALK:
		return "DINGTALK"
	case DataSource_FEISHU:
		return "FEISHU"
	case DataSource_MANUAL:
		return "MANUAL"
	}
	return "<UNSET>"
}

func DataSourceFromString(s string) (DataSource, error) {
	switch s {
	case "ENTERPRISE_WECHAT":
		return DataSource_ENTERPRISE_WECHAT, nil
	case "DINGTALK":
		return DataSource_DINGTALK, nil
	case "FEISHU":
		return DataSource_FEISHU, nil
	case "MANUAL":
		return DataSource_MANUAL, nil
	}
	return DataSource(0), fmt.Errorf("not a valid DataSource string")
}

func DataSourcePtr(v DataSource) *DataSource { return &v }
func (p *DataSource) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = DataSource(result.Int64)
	return
}

func (p *DataSource) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 员工状态枚举
type EmployeeStatus int64

const (
	// 在职
	EmployeeStatus_EMPLOYED EmployeeStatus = 1
	// 离职
	EmployeeStatus_QUIT EmployeeStatus = 2
)

func (p EmployeeStatus) String() string {
	switch p {
	case EmployeeStatus_EMPLOYED:
		return "EMPLOYED"
	case EmployeeStatus_QUIT:
		return "QUIT"
	}
	return "<UNSET>"
}

func EmployeeStatusFromString(s string) (EmployeeStatus, error) {
	switch s {
	case "EMPLOYED":
		return EmployeeStatus_EMPLOYED, nil
	case "QUIT":
		return EmployeeStatus_QUIT, nil
	}
	return EmployeeStatus(0), fmt.Errorf("not a valid EmployeeStatus string")
}

func EmployeeStatusPtr(v EmployeeStatus) *EmployeeStatus { return &v }
func (p *EmployeeStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = EmployeeStatus(result.Int64)
	return
}

func (p *EmployeeStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 部门状态枚举
type DepartmentStatus int64

const (
	// 正常
	DepartmentStatus_NORMAL DepartmentStatus = 1
	// 停用
	DepartmentStatus_DISABLED DepartmentStatus = 2
)

func (p DepartmentStatus) String() string {
	switch p {
	case DepartmentStatus_NORMAL:
		return "NORMAL"
	case DepartmentStatus_DISABLED:
		return "DISABLED"
	}
	return "<UNSET>"
}

func DepartmentStatusFromString(s string) (DepartmentStatus, error) {
	switch s {
	case "NORMAL":
		return DepartmentStatus_NORMAL, nil
	case "DISABLED":
		return DepartmentStatus_DISABLED, nil
	}
	return DepartmentStatus(0), fmt.Errorf("not a valid DepartmentStatus string")
}

func DepartmentStatusPtr(v DepartmentStatus) *DepartmentStatus { return &v }
func (p *DepartmentStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = DepartmentStatus(result.Int64)
	return
}

func (p *DepartmentStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 员工部门关系状态枚举
type EmployeeDepartmentStatus int64

const (
	// 正常
	EmployeeDepartmentStatus_NORMAL EmployeeDepartmentStatus = 1
	// 调离
	EmployeeDepartmentStatus_TRANSFERRED EmployeeDepartmentStatus = 2
)

func (p EmployeeDepartmentStatus) String() string {
	switch p {
	case EmployeeDepartmentStatus_NORMAL:
		return "NORMAL"
	case EmployeeDepartmentStatus_TRANSFERRED:
		return "TRANSFERRED"
	}
	return "<UNSET>"
}

func EmployeeDepartmentStatusFromString(s string) (EmployeeDepartmentStatus, error) {
	switch s {
	case "NORMAL":
		return EmployeeDepartmentStatus_NORMAL, nil
	case "TRANSFERRED":
		return EmployeeDepartmentStatus_TRANSFERRED, nil
	}
	return EmployeeDepartmentStatus(0), fmt.Errorf("not a valid EmployeeDepartmentStatus string")
}

func EmployeeDepartmentStatusPtr(v EmployeeDepartmentStatus) *EmployeeDepartmentStatus { return &v }
func (p *EmployeeDepartmentStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = EmployeeDepartmentStatus(result.Int64)
	return
}

func (p *EmployeeDepartmentStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Create account type enumeration
type CreateAccountType int64

const (
	// Do not create account
	CreateAccountType_NO_CREATE CreateAccountType = 0
	// Create account using work email
	CreateAccountType_CREATE_BY_EMAIL CreateAccountType = 1
)

func (p CreateAccountType) String() string {
	switch p {
	case CreateAccountType_NO_CREATE:
		return "NO_CREATE"
	case CreateAccountType_CREATE_BY_EMAIL:
		return "CREATE_BY_EMAIL"
	}
	return "<UNSET>"
}

func CreateAccountTypeFromString(s string) (CreateAccountType, error) {
	switch s {
	case "NO_CREATE":
		return CreateAccountType_NO_CREATE, nil
	case "CREATE_BY_EMAIL":
		return CreateAccountType_CREATE_BY_EMAIL, nil
	}
	return CreateAccountType(0), fmt.Errorf("not a valid CreateAccountType string")
}

func CreateAccountTypePtr(v CreateAccountType) *CreateAccountType { return &v }
func (p *CreateAccountType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = CreateAccountType(result.Int64)
	return
}

func (p *CreateAccountType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}
