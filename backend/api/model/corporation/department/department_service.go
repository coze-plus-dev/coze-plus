/*
 * Copyright 2025 coze-plus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package department

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

type DepartmentService interface {
	CreateDepartment(ctx context.Context, request *CreateDepartmentRequest) (r *CreateDepartmentResponse, err error)

	GetDepartment(ctx context.Context, request *GetDepartmentRequest) (r *GetDepartmentResponse, err error)

	UpdateDepartment(ctx context.Context, request *UpdateDepartmentRequest) (r *UpdateDepartmentResponse, err error)

	DeleteDepartment(ctx context.Context, request *DeleteDepartmentRequest) (r *DeleteDepartmentResponse, err error)

	ListDepartments(ctx context.Context, request *ListDepartmentRequest) (r *ListDepartmentResponse, err error)

	SortDepartments(ctx context.Context, request *SortDepartmentRequest) (r *SortDepartmentResponse, err error)

	GetDepartmentTree(ctx context.Context, request *GetDepartmentTreeRequest) (r *GetDepartmentTreeResponse, err error)
}

type DepartmentServiceClient struct {
	c thrift.TClient
}

func NewDepartmentServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DepartmentServiceClient {
	return &DepartmentServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewDepartmentServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DepartmentServiceClient {
	return &DepartmentServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewDepartmentServiceClient(c thrift.TClient) *DepartmentServiceClient {
	return &DepartmentServiceClient{
		c: c,
	}
}

func (p *DepartmentServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *DepartmentServiceClient) CreateDepartment(ctx context.Context, request *CreateDepartmentRequest) (r *CreateDepartmentResponse, err error) {
	var _args DepartmentServiceCreateDepartmentArgs
	_args.Request = request
	var _result DepartmentServiceCreateDepartmentResult
	if err = p.Client_().Call(ctx, "CreateDepartment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DepartmentServiceClient) GetDepartment(ctx context.Context, request *GetDepartmentRequest) (r *GetDepartmentResponse, err error) {
	var _args DepartmentServiceGetDepartmentArgs
	_args.Request = request
	var _result DepartmentServiceGetDepartmentResult
	if err = p.Client_().Call(ctx, "GetDepartment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DepartmentServiceClient) UpdateDepartment(ctx context.Context, request *UpdateDepartmentRequest) (r *UpdateDepartmentResponse, err error) {
	var _args DepartmentServiceUpdateDepartmentArgs
	_args.Request = request
	var _result DepartmentServiceUpdateDepartmentResult
	if err = p.Client_().Call(ctx, "UpdateDepartment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DepartmentServiceClient) DeleteDepartment(ctx context.Context, request *DeleteDepartmentRequest) (r *DeleteDepartmentResponse, err error) {
	var _args DepartmentServiceDeleteDepartmentArgs
	_args.Request = request
	var _result DepartmentServiceDeleteDepartmentResult
	if err = p.Client_().Call(ctx, "DeleteDepartment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DepartmentServiceClient) ListDepartments(ctx context.Context, request *ListDepartmentRequest) (r *ListDepartmentResponse, err error) {
	var _args DepartmentServiceListDepartmentsArgs
	_args.Request = request
	var _result DepartmentServiceListDepartmentsResult
	if err = p.Client_().Call(ctx, "ListDepartments", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DepartmentServiceClient) SortDepartments(ctx context.Context, request *SortDepartmentRequest) (r *SortDepartmentResponse, err error) {
	var _args DepartmentServiceSortDepartmentsArgs
	_args.Request = request
	var _result DepartmentServiceSortDepartmentsResult
	if err = p.Client_().Call(ctx, "SortDepartments", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DepartmentServiceClient) GetDepartmentTree(ctx context.Context, request *GetDepartmentTreeRequest) (r *GetDepartmentTreeResponse, err error) {
	var _args DepartmentServiceGetDepartmentTreeArgs
	_args.Request = request
	var _result DepartmentServiceGetDepartmentTreeResult
	if err = p.Client_().Call(ctx, "GetDepartmentTree", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type DepartmentServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      DepartmentService
}

func (p *DepartmentServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *DepartmentServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *DepartmentServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewDepartmentServiceProcessor(handler DepartmentService) *DepartmentServiceProcessor {
	self := &DepartmentServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateDepartment", &departmentServiceProcessorCreateDepartment{handler: handler})
	self.AddToProcessorMap("GetDepartment", &departmentServiceProcessorGetDepartment{handler: handler})
	self.AddToProcessorMap("UpdateDepartment", &departmentServiceProcessorUpdateDepartment{handler: handler})
	self.AddToProcessorMap("DeleteDepartment", &departmentServiceProcessorDeleteDepartment{handler: handler})
	self.AddToProcessorMap("ListDepartments", &departmentServiceProcessorListDepartments{handler: handler})
	self.AddToProcessorMap("SortDepartments", &departmentServiceProcessorSortDepartments{handler: handler})
	self.AddToProcessorMap("GetDepartmentTree", &departmentServiceProcessorGetDepartmentTree{handler: handler})
	return self
}
func (p *DepartmentServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type departmentServiceProcessorCreateDepartment struct {
	handler DepartmentService
}

func (p *departmentServiceProcessorCreateDepartment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DepartmentServiceCreateDepartmentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateDepartment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DepartmentServiceCreateDepartmentResult{}
	var retval *CreateDepartmentResponse
	if retval, err2 = p.handler.CreateDepartment(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateDepartment: "+err2.Error())
		oprot.WriteMessageBegin("CreateDepartment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateDepartment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type departmentServiceProcessorGetDepartment struct {
	handler DepartmentService
}

func (p *departmentServiceProcessorGetDepartment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DepartmentServiceGetDepartmentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDepartment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DepartmentServiceGetDepartmentResult{}
	var retval *GetDepartmentResponse
	if retval, err2 = p.handler.GetDepartment(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDepartment: "+err2.Error())
		oprot.WriteMessageBegin("GetDepartment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDepartment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type departmentServiceProcessorUpdateDepartment struct {
	handler DepartmentService
}

func (p *departmentServiceProcessorUpdateDepartment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DepartmentServiceUpdateDepartmentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateDepartment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DepartmentServiceUpdateDepartmentResult{}
	var retval *UpdateDepartmentResponse
	if retval, err2 = p.handler.UpdateDepartment(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateDepartment: "+err2.Error())
		oprot.WriteMessageBegin("UpdateDepartment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateDepartment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type departmentServiceProcessorDeleteDepartment struct {
	handler DepartmentService
}

func (p *departmentServiceProcessorDeleteDepartment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DepartmentServiceDeleteDepartmentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteDepartment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DepartmentServiceDeleteDepartmentResult{}
	var retval *DeleteDepartmentResponse
	if retval, err2 = p.handler.DeleteDepartment(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteDepartment: "+err2.Error())
		oprot.WriteMessageBegin("DeleteDepartment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteDepartment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type departmentServiceProcessorListDepartments struct {
	handler DepartmentService
}

func (p *departmentServiceProcessorListDepartments) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DepartmentServiceListDepartmentsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListDepartments", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DepartmentServiceListDepartmentsResult{}
	var retval *ListDepartmentResponse
	if retval, err2 = p.handler.ListDepartments(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListDepartments: "+err2.Error())
		oprot.WriteMessageBegin("ListDepartments", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListDepartments", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type departmentServiceProcessorSortDepartments struct {
	handler DepartmentService
}

func (p *departmentServiceProcessorSortDepartments) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DepartmentServiceSortDepartmentsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SortDepartments", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DepartmentServiceSortDepartmentsResult{}
	var retval *SortDepartmentResponse
	if retval, err2 = p.handler.SortDepartments(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SortDepartments: "+err2.Error())
		oprot.WriteMessageBegin("SortDepartments", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SortDepartments", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type departmentServiceProcessorGetDepartmentTree struct {
	handler DepartmentService
}

func (p *departmentServiceProcessorGetDepartmentTree) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DepartmentServiceGetDepartmentTreeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDepartmentTree", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DepartmentServiceGetDepartmentTreeResult{}
	var retval *GetDepartmentTreeResponse
	if retval, err2 = p.handler.GetDepartmentTree(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDepartmentTree: "+err2.Error())
		oprot.WriteMessageBegin("GetDepartmentTree", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDepartmentTree", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type DepartmentServiceCreateDepartmentArgs struct {
	Request *CreateDepartmentRequest `thrift:"request,1"`
}

func NewDepartmentServiceCreateDepartmentArgs() *DepartmentServiceCreateDepartmentArgs {
	return &DepartmentServiceCreateDepartmentArgs{}
}

func (p *DepartmentServiceCreateDepartmentArgs) InitDefault() {
}

var DepartmentServiceCreateDepartmentArgs_Request_DEFAULT *CreateDepartmentRequest

func (p *DepartmentServiceCreateDepartmentArgs) GetRequest() (v *CreateDepartmentRequest) {
	if !p.IsSetRequest() {
		return DepartmentServiceCreateDepartmentArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_DepartmentServiceCreateDepartmentArgs = map[int16]string{
	1: "request",
}

func (p *DepartmentServiceCreateDepartmentArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DepartmentServiceCreateDepartmentArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentServiceCreateDepartmentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentServiceCreateDepartmentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateDepartmentRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *DepartmentServiceCreateDepartmentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDepartment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentServiceCreateDepartmentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DepartmentServiceCreateDepartmentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentServiceCreateDepartmentArgs(%+v)", *p)

}

type DepartmentServiceCreateDepartmentResult struct {
	Success *CreateDepartmentResponse `thrift:"success,0,optional"`
}

func NewDepartmentServiceCreateDepartmentResult() *DepartmentServiceCreateDepartmentResult {
	return &DepartmentServiceCreateDepartmentResult{}
}

func (p *DepartmentServiceCreateDepartmentResult) InitDefault() {
}

var DepartmentServiceCreateDepartmentResult_Success_DEFAULT *CreateDepartmentResponse

func (p *DepartmentServiceCreateDepartmentResult) GetSuccess() (v *CreateDepartmentResponse) {
	if !p.IsSetSuccess() {
		return DepartmentServiceCreateDepartmentResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_DepartmentServiceCreateDepartmentResult = map[int16]string{
	0: "success",
}

func (p *DepartmentServiceCreateDepartmentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DepartmentServiceCreateDepartmentResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentServiceCreateDepartmentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentServiceCreateDepartmentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateDepartmentResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DepartmentServiceCreateDepartmentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDepartment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentServiceCreateDepartmentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DepartmentServiceCreateDepartmentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentServiceCreateDepartmentResult(%+v)", *p)

}

type DepartmentServiceGetDepartmentArgs struct {
	Request *GetDepartmentRequest `thrift:"request,1"`
}

func NewDepartmentServiceGetDepartmentArgs() *DepartmentServiceGetDepartmentArgs {
	return &DepartmentServiceGetDepartmentArgs{}
}

func (p *DepartmentServiceGetDepartmentArgs) InitDefault() {
}

var DepartmentServiceGetDepartmentArgs_Request_DEFAULT *GetDepartmentRequest

func (p *DepartmentServiceGetDepartmentArgs) GetRequest() (v *GetDepartmentRequest) {
	if !p.IsSetRequest() {
		return DepartmentServiceGetDepartmentArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_DepartmentServiceGetDepartmentArgs = map[int16]string{
	1: "request",
}

func (p *DepartmentServiceGetDepartmentArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DepartmentServiceGetDepartmentArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentServiceGetDepartmentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentServiceGetDepartmentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetDepartmentRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *DepartmentServiceGetDepartmentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDepartment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentServiceGetDepartmentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DepartmentServiceGetDepartmentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentServiceGetDepartmentArgs(%+v)", *p)

}

type DepartmentServiceGetDepartmentResult struct {
	Success *GetDepartmentResponse `thrift:"success,0,optional"`
}

func NewDepartmentServiceGetDepartmentResult() *DepartmentServiceGetDepartmentResult {
	return &DepartmentServiceGetDepartmentResult{}
}

func (p *DepartmentServiceGetDepartmentResult) InitDefault() {
}

var DepartmentServiceGetDepartmentResult_Success_DEFAULT *GetDepartmentResponse

func (p *DepartmentServiceGetDepartmentResult) GetSuccess() (v *GetDepartmentResponse) {
	if !p.IsSetSuccess() {
		return DepartmentServiceGetDepartmentResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_DepartmentServiceGetDepartmentResult = map[int16]string{
	0: "success",
}

func (p *DepartmentServiceGetDepartmentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DepartmentServiceGetDepartmentResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentServiceGetDepartmentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentServiceGetDepartmentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetDepartmentResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DepartmentServiceGetDepartmentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDepartment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentServiceGetDepartmentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DepartmentServiceGetDepartmentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentServiceGetDepartmentResult(%+v)", *p)

}

type DepartmentServiceUpdateDepartmentArgs struct {
	Request *UpdateDepartmentRequest `thrift:"request,1"`
}

func NewDepartmentServiceUpdateDepartmentArgs() *DepartmentServiceUpdateDepartmentArgs {
	return &DepartmentServiceUpdateDepartmentArgs{}
}

func (p *DepartmentServiceUpdateDepartmentArgs) InitDefault() {
}

var DepartmentServiceUpdateDepartmentArgs_Request_DEFAULT *UpdateDepartmentRequest

func (p *DepartmentServiceUpdateDepartmentArgs) GetRequest() (v *UpdateDepartmentRequest) {
	if !p.IsSetRequest() {
		return DepartmentServiceUpdateDepartmentArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_DepartmentServiceUpdateDepartmentArgs = map[int16]string{
	1: "request",
}

func (p *DepartmentServiceUpdateDepartmentArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DepartmentServiceUpdateDepartmentArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentServiceUpdateDepartmentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentServiceUpdateDepartmentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateDepartmentRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *DepartmentServiceUpdateDepartmentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDepartment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentServiceUpdateDepartmentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DepartmentServiceUpdateDepartmentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentServiceUpdateDepartmentArgs(%+v)", *p)

}

type DepartmentServiceUpdateDepartmentResult struct {
	Success *UpdateDepartmentResponse `thrift:"success,0,optional"`
}

func NewDepartmentServiceUpdateDepartmentResult() *DepartmentServiceUpdateDepartmentResult {
	return &DepartmentServiceUpdateDepartmentResult{}
}

func (p *DepartmentServiceUpdateDepartmentResult) InitDefault() {
}

var DepartmentServiceUpdateDepartmentResult_Success_DEFAULT *UpdateDepartmentResponse

func (p *DepartmentServiceUpdateDepartmentResult) GetSuccess() (v *UpdateDepartmentResponse) {
	if !p.IsSetSuccess() {
		return DepartmentServiceUpdateDepartmentResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_DepartmentServiceUpdateDepartmentResult = map[int16]string{
	0: "success",
}

func (p *DepartmentServiceUpdateDepartmentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DepartmentServiceUpdateDepartmentResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentServiceUpdateDepartmentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentServiceUpdateDepartmentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateDepartmentResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DepartmentServiceUpdateDepartmentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDepartment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentServiceUpdateDepartmentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DepartmentServiceUpdateDepartmentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentServiceUpdateDepartmentResult(%+v)", *p)

}

type DepartmentServiceDeleteDepartmentArgs struct {
	Request *DeleteDepartmentRequest `thrift:"request,1"`
}

func NewDepartmentServiceDeleteDepartmentArgs() *DepartmentServiceDeleteDepartmentArgs {
	return &DepartmentServiceDeleteDepartmentArgs{}
}

func (p *DepartmentServiceDeleteDepartmentArgs) InitDefault() {
}

var DepartmentServiceDeleteDepartmentArgs_Request_DEFAULT *DeleteDepartmentRequest

func (p *DepartmentServiceDeleteDepartmentArgs) GetRequest() (v *DeleteDepartmentRequest) {
	if !p.IsSetRequest() {
		return DepartmentServiceDeleteDepartmentArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_DepartmentServiceDeleteDepartmentArgs = map[int16]string{
	1: "request",
}

func (p *DepartmentServiceDeleteDepartmentArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DepartmentServiceDeleteDepartmentArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentServiceDeleteDepartmentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentServiceDeleteDepartmentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteDepartmentRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *DepartmentServiceDeleteDepartmentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDepartment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentServiceDeleteDepartmentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DepartmentServiceDeleteDepartmentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentServiceDeleteDepartmentArgs(%+v)", *p)

}

type DepartmentServiceDeleteDepartmentResult struct {
	Success *DeleteDepartmentResponse `thrift:"success,0,optional"`
}

func NewDepartmentServiceDeleteDepartmentResult() *DepartmentServiceDeleteDepartmentResult {
	return &DepartmentServiceDeleteDepartmentResult{}
}

func (p *DepartmentServiceDeleteDepartmentResult) InitDefault() {
}

var DepartmentServiceDeleteDepartmentResult_Success_DEFAULT *DeleteDepartmentResponse

func (p *DepartmentServiceDeleteDepartmentResult) GetSuccess() (v *DeleteDepartmentResponse) {
	if !p.IsSetSuccess() {
		return DepartmentServiceDeleteDepartmentResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_DepartmentServiceDeleteDepartmentResult = map[int16]string{
	0: "success",
}

func (p *DepartmentServiceDeleteDepartmentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DepartmentServiceDeleteDepartmentResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentServiceDeleteDepartmentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentServiceDeleteDepartmentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteDepartmentResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DepartmentServiceDeleteDepartmentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDepartment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentServiceDeleteDepartmentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DepartmentServiceDeleteDepartmentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentServiceDeleteDepartmentResult(%+v)", *p)

}

type DepartmentServiceListDepartmentsArgs struct {
	Request *ListDepartmentRequest `thrift:"request,1"`
}

func NewDepartmentServiceListDepartmentsArgs() *DepartmentServiceListDepartmentsArgs {
	return &DepartmentServiceListDepartmentsArgs{}
}

func (p *DepartmentServiceListDepartmentsArgs) InitDefault() {
}

var DepartmentServiceListDepartmentsArgs_Request_DEFAULT *ListDepartmentRequest

func (p *DepartmentServiceListDepartmentsArgs) GetRequest() (v *ListDepartmentRequest) {
	if !p.IsSetRequest() {
		return DepartmentServiceListDepartmentsArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_DepartmentServiceListDepartmentsArgs = map[int16]string{
	1: "request",
}

func (p *DepartmentServiceListDepartmentsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DepartmentServiceListDepartmentsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentServiceListDepartmentsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentServiceListDepartmentsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListDepartmentRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *DepartmentServiceListDepartmentsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDepartments_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentServiceListDepartmentsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DepartmentServiceListDepartmentsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentServiceListDepartmentsArgs(%+v)", *p)

}

type DepartmentServiceListDepartmentsResult struct {
	Success *ListDepartmentResponse `thrift:"success,0,optional"`
}

func NewDepartmentServiceListDepartmentsResult() *DepartmentServiceListDepartmentsResult {
	return &DepartmentServiceListDepartmentsResult{}
}

func (p *DepartmentServiceListDepartmentsResult) InitDefault() {
}

var DepartmentServiceListDepartmentsResult_Success_DEFAULT *ListDepartmentResponse

func (p *DepartmentServiceListDepartmentsResult) GetSuccess() (v *ListDepartmentResponse) {
	if !p.IsSetSuccess() {
		return DepartmentServiceListDepartmentsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_DepartmentServiceListDepartmentsResult = map[int16]string{
	0: "success",
}

func (p *DepartmentServiceListDepartmentsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DepartmentServiceListDepartmentsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentServiceListDepartmentsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentServiceListDepartmentsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListDepartmentResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DepartmentServiceListDepartmentsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDepartments_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentServiceListDepartmentsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DepartmentServiceListDepartmentsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentServiceListDepartmentsResult(%+v)", *p)

}

type DepartmentServiceSortDepartmentsArgs struct {
	Request *SortDepartmentRequest `thrift:"request,1"`
}

func NewDepartmentServiceSortDepartmentsArgs() *DepartmentServiceSortDepartmentsArgs {
	return &DepartmentServiceSortDepartmentsArgs{}
}

func (p *DepartmentServiceSortDepartmentsArgs) InitDefault() {
}

var DepartmentServiceSortDepartmentsArgs_Request_DEFAULT *SortDepartmentRequest

func (p *DepartmentServiceSortDepartmentsArgs) GetRequest() (v *SortDepartmentRequest) {
	if !p.IsSetRequest() {
		return DepartmentServiceSortDepartmentsArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_DepartmentServiceSortDepartmentsArgs = map[int16]string{
	1: "request",
}

func (p *DepartmentServiceSortDepartmentsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DepartmentServiceSortDepartmentsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentServiceSortDepartmentsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentServiceSortDepartmentsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSortDepartmentRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *DepartmentServiceSortDepartmentsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SortDepartments_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentServiceSortDepartmentsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DepartmentServiceSortDepartmentsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentServiceSortDepartmentsArgs(%+v)", *p)

}

type DepartmentServiceSortDepartmentsResult struct {
	Success *SortDepartmentResponse `thrift:"success,0,optional"`
}

func NewDepartmentServiceSortDepartmentsResult() *DepartmentServiceSortDepartmentsResult {
	return &DepartmentServiceSortDepartmentsResult{}
}

func (p *DepartmentServiceSortDepartmentsResult) InitDefault() {
}

var DepartmentServiceSortDepartmentsResult_Success_DEFAULT *SortDepartmentResponse

func (p *DepartmentServiceSortDepartmentsResult) GetSuccess() (v *SortDepartmentResponse) {
	if !p.IsSetSuccess() {
		return DepartmentServiceSortDepartmentsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_DepartmentServiceSortDepartmentsResult = map[int16]string{
	0: "success",
}

func (p *DepartmentServiceSortDepartmentsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DepartmentServiceSortDepartmentsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentServiceSortDepartmentsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentServiceSortDepartmentsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSortDepartmentResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DepartmentServiceSortDepartmentsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SortDepartments_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentServiceSortDepartmentsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DepartmentServiceSortDepartmentsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentServiceSortDepartmentsResult(%+v)", *p)

}

type DepartmentServiceGetDepartmentTreeArgs struct {
	Request *GetDepartmentTreeRequest `thrift:"request,1"`
}

func NewDepartmentServiceGetDepartmentTreeArgs() *DepartmentServiceGetDepartmentTreeArgs {
	return &DepartmentServiceGetDepartmentTreeArgs{}
}

func (p *DepartmentServiceGetDepartmentTreeArgs) InitDefault() {
}

var DepartmentServiceGetDepartmentTreeArgs_Request_DEFAULT *GetDepartmentTreeRequest

func (p *DepartmentServiceGetDepartmentTreeArgs) GetRequest() (v *GetDepartmentTreeRequest) {
	if !p.IsSetRequest() {
		return DepartmentServiceGetDepartmentTreeArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_DepartmentServiceGetDepartmentTreeArgs = map[int16]string{
	1: "request",
}

func (p *DepartmentServiceGetDepartmentTreeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DepartmentServiceGetDepartmentTreeArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentServiceGetDepartmentTreeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentServiceGetDepartmentTreeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetDepartmentTreeRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *DepartmentServiceGetDepartmentTreeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDepartmentTree_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentServiceGetDepartmentTreeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DepartmentServiceGetDepartmentTreeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentServiceGetDepartmentTreeArgs(%+v)", *p)

}

type DepartmentServiceGetDepartmentTreeResult struct {
	Success *GetDepartmentTreeResponse `thrift:"success,0,optional"`
}

func NewDepartmentServiceGetDepartmentTreeResult() *DepartmentServiceGetDepartmentTreeResult {
	return &DepartmentServiceGetDepartmentTreeResult{}
}

func (p *DepartmentServiceGetDepartmentTreeResult) InitDefault() {
}

var DepartmentServiceGetDepartmentTreeResult_Success_DEFAULT *GetDepartmentTreeResponse

func (p *DepartmentServiceGetDepartmentTreeResult) GetSuccess() (v *GetDepartmentTreeResponse) {
	if !p.IsSetSuccess() {
		return DepartmentServiceGetDepartmentTreeResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_DepartmentServiceGetDepartmentTreeResult = map[int16]string{
	0: "success",
}

func (p *DepartmentServiceGetDepartmentTreeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DepartmentServiceGetDepartmentTreeResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentServiceGetDepartmentTreeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentServiceGetDepartmentTreeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetDepartmentTreeResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DepartmentServiceGetDepartmentTreeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDepartmentTree_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentServiceGetDepartmentTreeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DepartmentServiceGetDepartmentTreeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentServiceGetDepartmentTreeResult(%+v)", *p)

}
