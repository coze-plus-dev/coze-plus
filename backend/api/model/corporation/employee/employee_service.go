/*
 * Copyright 2025 coze-plus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package employee

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

type EmployeeService interface {
	CreateEmployee(ctx context.Context, request *CreateEmployeeRequest) (r *CreateEmployeeResponse, err error)

	GetEmployee(ctx context.Context, request *GetEmployeeRequest) (r *GetEmployeeResponse, err error)

	UpdateEmployee(ctx context.Context, request *UpdateEmployeeRequest) (r *UpdateEmployeeResponse, err error)

	DeleteEmployee(ctx context.Context, request *DeleteEmployeeRequest) (r *DeleteEmployeeResponse, err error)

	ListEmployees(ctx context.Context, request *ListEmployeeRequest) (r *ListEmployeeResponse, err error)

	ChangeEmployeeDepartment(ctx context.Context, request *ChangeEmployeeDepartmentRequest) (r *ChangeEmployeeDepartmentResponse, err error)

	ResignEmployee(ctx context.Context, request *ResignEmployeeRequest) (r *ResignEmployeeResponse, err error)

	RestoreEmployee(ctx context.Context, request *RestoreEmployeeRequest) (r *RestoreEmployeeResponse, err error)
}

type EmployeeServiceClient struct {
	c thrift.TClient
}

func NewEmployeeServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *EmployeeServiceClient {
	return &EmployeeServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewEmployeeServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *EmployeeServiceClient {
	return &EmployeeServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewEmployeeServiceClient(c thrift.TClient) *EmployeeServiceClient {
	return &EmployeeServiceClient{
		c: c,
	}
}

func (p *EmployeeServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *EmployeeServiceClient) CreateEmployee(ctx context.Context, request *CreateEmployeeRequest) (r *CreateEmployeeResponse, err error) {
	var _args EmployeeServiceCreateEmployeeArgs
	_args.Request = request
	var _result EmployeeServiceCreateEmployeeResult
	if err = p.Client_().Call(ctx, "CreateEmployee", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EmployeeServiceClient) GetEmployee(ctx context.Context, request *GetEmployeeRequest) (r *GetEmployeeResponse, err error) {
	var _args EmployeeServiceGetEmployeeArgs
	_args.Request = request
	var _result EmployeeServiceGetEmployeeResult
	if err = p.Client_().Call(ctx, "GetEmployee", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EmployeeServiceClient) UpdateEmployee(ctx context.Context, request *UpdateEmployeeRequest) (r *UpdateEmployeeResponse, err error) {
	var _args EmployeeServiceUpdateEmployeeArgs
	_args.Request = request
	var _result EmployeeServiceUpdateEmployeeResult
	if err = p.Client_().Call(ctx, "UpdateEmployee", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EmployeeServiceClient) DeleteEmployee(ctx context.Context, request *DeleteEmployeeRequest) (r *DeleteEmployeeResponse, err error) {
	var _args EmployeeServiceDeleteEmployeeArgs
	_args.Request = request
	var _result EmployeeServiceDeleteEmployeeResult
	if err = p.Client_().Call(ctx, "DeleteEmployee", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EmployeeServiceClient) ListEmployees(ctx context.Context, request *ListEmployeeRequest) (r *ListEmployeeResponse, err error) {
	var _args EmployeeServiceListEmployeesArgs
	_args.Request = request
	var _result EmployeeServiceListEmployeesResult
	if err = p.Client_().Call(ctx, "ListEmployees", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EmployeeServiceClient) ChangeEmployeeDepartment(ctx context.Context, request *ChangeEmployeeDepartmentRequest) (r *ChangeEmployeeDepartmentResponse, err error) {
	var _args EmployeeServiceChangeEmployeeDepartmentArgs
	_args.Request = request
	var _result EmployeeServiceChangeEmployeeDepartmentResult
	if err = p.Client_().Call(ctx, "ChangeEmployeeDepartment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EmployeeServiceClient) ResignEmployee(ctx context.Context, request *ResignEmployeeRequest) (r *ResignEmployeeResponse, err error) {
	var _args EmployeeServiceResignEmployeeArgs
	_args.Request = request
	var _result EmployeeServiceResignEmployeeResult
	if err = p.Client_().Call(ctx, "ResignEmployee", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EmployeeServiceClient) RestoreEmployee(ctx context.Context, request *RestoreEmployeeRequest) (r *RestoreEmployeeResponse, err error) {
	var _args EmployeeServiceRestoreEmployeeArgs
	_args.Request = request
	var _result EmployeeServiceRestoreEmployeeResult
	if err = p.Client_().Call(ctx, "RestoreEmployee", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type EmployeeServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      EmployeeService
}

func (p *EmployeeServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *EmployeeServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *EmployeeServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewEmployeeServiceProcessor(handler EmployeeService) *EmployeeServiceProcessor {
	self := &EmployeeServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateEmployee", &employeeServiceProcessorCreateEmployee{handler: handler})
	self.AddToProcessorMap("GetEmployee", &employeeServiceProcessorGetEmployee{handler: handler})
	self.AddToProcessorMap("UpdateEmployee", &employeeServiceProcessorUpdateEmployee{handler: handler})
	self.AddToProcessorMap("DeleteEmployee", &employeeServiceProcessorDeleteEmployee{handler: handler})
	self.AddToProcessorMap("ListEmployees", &employeeServiceProcessorListEmployees{handler: handler})
	self.AddToProcessorMap("ChangeEmployeeDepartment", &employeeServiceProcessorChangeEmployeeDepartment{handler: handler})
	self.AddToProcessorMap("ResignEmployee", &employeeServiceProcessorResignEmployee{handler: handler})
	self.AddToProcessorMap("RestoreEmployee", &employeeServiceProcessorRestoreEmployee{handler: handler})
	return self
}
func (p *EmployeeServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type employeeServiceProcessorCreateEmployee struct {
	handler EmployeeService
}

func (p *employeeServiceProcessorCreateEmployee) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EmployeeServiceCreateEmployeeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateEmployee", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EmployeeServiceCreateEmployeeResult{}
	var retval *CreateEmployeeResponse
	if retval, err2 = p.handler.CreateEmployee(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateEmployee: "+err2.Error())
		oprot.WriteMessageBegin("CreateEmployee", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateEmployee", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type employeeServiceProcessorGetEmployee struct {
	handler EmployeeService
}

func (p *employeeServiceProcessorGetEmployee) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EmployeeServiceGetEmployeeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetEmployee", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EmployeeServiceGetEmployeeResult{}
	var retval *GetEmployeeResponse
	if retval, err2 = p.handler.GetEmployee(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetEmployee: "+err2.Error())
		oprot.WriteMessageBegin("GetEmployee", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetEmployee", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type employeeServiceProcessorUpdateEmployee struct {
	handler EmployeeService
}

func (p *employeeServiceProcessorUpdateEmployee) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EmployeeServiceUpdateEmployeeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateEmployee", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EmployeeServiceUpdateEmployeeResult{}
	var retval *UpdateEmployeeResponse
	if retval, err2 = p.handler.UpdateEmployee(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateEmployee: "+err2.Error())
		oprot.WriteMessageBegin("UpdateEmployee", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateEmployee", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type employeeServiceProcessorDeleteEmployee struct {
	handler EmployeeService
}

func (p *employeeServiceProcessorDeleteEmployee) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EmployeeServiceDeleteEmployeeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteEmployee", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EmployeeServiceDeleteEmployeeResult{}
	var retval *DeleteEmployeeResponse
	if retval, err2 = p.handler.DeleteEmployee(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteEmployee: "+err2.Error())
		oprot.WriteMessageBegin("DeleteEmployee", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteEmployee", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type employeeServiceProcessorListEmployees struct {
	handler EmployeeService
}

func (p *employeeServiceProcessorListEmployees) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EmployeeServiceListEmployeesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListEmployees", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EmployeeServiceListEmployeesResult{}
	var retval *ListEmployeeResponse
	if retval, err2 = p.handler.ListEmployees(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListEmployees: "+err2.Error())
		oprot.WriteMessageBegin("ListEmployees", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListEmployees", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type employeeServiceProcessorChangeEmployeeDepartment struct {
	handler EmployeeService
}

func (p *employeeServiceProcessorChangeEmployeeDepartment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EmployeeServiceChangeEmployeeDepartmentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ChangeEmployeeDepartment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EmployeeServiceChangeEmployeeDepartmentResult{}
	var retval *ChangeEmployeeDepartmentResponse
	if retval, err2 = p.handler.ChangeEmployeeDepartment(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ChangeEmployeeDepartment: "+err2.Error())
		oprot.WriteMessageBegin("ChangeEmployeeDepartment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ChangeEmployeeDepartment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type employeeServiceProcessorResignEmployee struct {
	handler EmployeeService
}

func (p *employeeServiceProcessorResignEmployee) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EmployeeServiceResignEmployeeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ResignEmployee", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EmployeeServiceResignEmployeeResult{}
	var retval *ResignEmployeeResponse
	if retval, err2 = p.handler.ResignEmployee(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ResignEmployee: "+err2.Error())
		oprot.WriteMessageBegin("ResignEmployee", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ResignEmployee", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type employeeServiceProcessorRestoreEmployee struct {
	handler EmployeeService
}

func (p *employeeServiceProcessorRestoreEmployee) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EmployeeServiceRestoreEmployeeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RestoreEmployee", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EmployeeServiceRestoreEmployeeResult{}
	var retval *RestoreEmployeeResponse
	if retval, err2 = p.handler.RestoreEmployee(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RestoreEmployee: "+err2.Error())
		oprot.WriteMessageBegin("RestoreEmployee", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RestoreEmployee", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type EmployeeServiceCreateEmployeeArgs struct {
	Request *CreateEmployeeRequest `thrift:"request,1"`
}

func NewEmployeeServiceCreateEmployeeArgs() *EmployeeServiceCreateEmployeeArgs {
	return &EmployeeServiceCreateEmployeeArgs{}
}

func (p *EmployeeServiceCreateEmployeeArgs) InitDefault() {
}

var EmployeeServiceCreateEmployeeArgs_Request_DEFAULT *CreateEmployeeRequest

func (p *EmployeeServiceCreateEmployeeArgs) GetRequest() (v *CreateEmployeeRequest) {
	if !p.IsSetRequest() {
		return EmployeeServiceCreateEmployeeArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_EmployeeServiceCreateEmployeeArgs = map[int16]string{
	1: "request",
}

func (p *EmployeeServiceCreateEmployeeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EmployeeServiceCreateEmployeeArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceCreateEmployeeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceCreateEmployeeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateEmployeeRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EmployeeServiceCreateEmployeeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEmployee_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceCreateEmployeeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EmployeeServiceCreateEmployeeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceCreateEmployeeArgs(%+v)", *p)

}

type EmployeeServiceCreateEmployeeResult struct {
	Success *CreateEmployeeResponse `thrift:"success,0,optional"`
}

func NewEmployeeServiceCreateEmployeeResult() *EmployeeServiceCreateEmployeeResult {
	return &EmployeeServiceCreateEmployeeResult{}
}

func (p *EmployeeServiceCreateEmployeeResult) InitDefault() {
}

var EmployeeServiceCreateEmployeeResult_Success_DEFAULT *CreateEmployeeResponse

func (p *EmployeeServiceCreateEmployeeResult) GetSuccess() (v *CreateEmployeeResponse) {
	if !p.IsSetSuccess() {
		return EmployeeServiceCreateEmployeeResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EmployeeServiceCreateEmployeeResult = map[int16]string{
	0: "success",
}

func (p *EmployeeServiceCreateEmployeeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmployeeServiceCreateEmployeeResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceCreateEmployeeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceCreateEmployeeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateEmployeeResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EmployeeServiceCreateEmployeeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEmployee_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceCreateEmployeeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EmployeeServiceCreateEmployeeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceCreateEmployeeResult(%+v)", *p)

}

type EmployeeServiceGetEmployeeArgs struct {
	Request *GetEmployeeRequest `thrift:"request,1"`
}

func NewEmployeeServiceGetEmployeeArgs() *EmployeeServiceGetEmployeeArgs {
	return &EmployeeServiceGetEmployeeArgs{}
}

func (p *EmployeeServiceGetEmployeeArgs) InitDefault() {
}

var EmployeeServiceGetEmployeeArgs_Request_DEFAULT *GetEmployeeRequest

func (p *EmployeeServiceGetEmployeeArgs) GetRequest() (v *GetEmployeeRequest) {
	if !p.IsSetRequest() {
		return EmployeeServiceGetEmployeeArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_EmployeeServiceGetEmployeeArgs = map[int16]string{
	1: "request",
}

func (p *EmployeeServiceGetEmployeeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EmployeeServiceGetEmployeeArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceGetEmployeeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceGetEmployeeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetEmployeeRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EmployeeServiceGetEmployeeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEmployee_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceGetEmployeeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EmployeeServiceGetEmployeeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceGetEmployeeArgs(%+v)", *p)

}

type EmployeeServiceGetEmployeeResult struct {
	Success *GetEmployeeResponse `thrift:"success,0,optional"`
}

func NewEmployeeServiceGetEmployeeResult() *EmployeeServiceGetEmployeeResult {
	return &EmployeeServiceGetEmployeeResult{}
}

func (p *EmployeeServiceGetEmployeeResult) InitDefault() {
}

var EmployeeServiceGetEmployeeResult_Success_DEFAULT *GetEmployeeResponse

func (p *EmployeeServiceGetEmployeeResult) GetSuccess() (v *GetEmployeeResponse) {
	if !p.IsSetSuccess() {
		return EmployeeServiceGetEmployeeResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EmployeeServiceGetEmployeeResult = map[int16]string{
	0: "success",
}

func (p *EmployeeServiceGetEmployeeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmployeeServiceGetEmployeeResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceGetEmployeeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceGetEmployeeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetEmployeeResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EmployeeServiceGetEmployeeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEmployee_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceGetEmployeeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EmployeeServiceGetEmployeeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceGetEmployeeResult(%+v)", *p)

}

type EmployeeServiceUpdateEmployeeArgs struct {
	Request *UpdateEmployeeRequest `thrift:"request,1"`
}

func NewEmployeeServiceUpdateEmployeeArgs() *EmployeeServiceUpdateEmployeeArgs {
	return &EmployeeServiceUpdateEmployeeArgs{}
}

func (p *EmployeeServiceUpdateEmployeeArgs) InitDefault() {
}

var EmployeeServiceUpdateEmployeeArgs_Request_DEFAULT *UpdateEmployeeRequest

func (p *EmployeeServiceUpdateEmployeeArgs) GetRequest() (v *UpdateEmployeeRequest) {
	if !p.IsSetRequest() {
		return EmployeeServiceUpdateEmployeeArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_EmployeeServiceUpdateEmployeeArgs = map[int16]string{
	1: "request",
}

func (p *EmployeeServiceUpdateEmployeeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EmployeeServiceUpdateEmployeeArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceUpdateEmployeeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceUpdateEmployeeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateEmployeeRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EmployeeServiceUpdateEmployeeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEmployee_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceUpdateEmployeeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EmployeeServiceUpdateEmployeeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceUpdateEmployeeArgs(%+v)", *p)

}

type EmployeeServiceUpdateEmployeeResult struct {
	Success *UpdateEmployeeResponse `thrift:"success,0,optional"`
}

func NewEmployeeServiceUpdateEmployeeResult() *EmployeeServiceUpdateEmployeeResult {
	return &EmployeeServiceUpdateEmployeeResult{}
}

func (p *EmployeeServiceUpdateEmployeeResult) InitDefault() {
}

var EmployeeServiceUpdateEmployeeResult_Success_DEFAULT *UpdateEmployeeResponse

func (p *EmployeeServiceUpdateEmployeeResult) GetSuccess() (v *UpdateEmployeeResponse) {
	if !p.IsSetSuccess() {
		return EmployeeServiceUpdateEmployeeResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EmployeeServiceUpdateEmployeeResult = map[int16]string{
	0: "success",
}

func (p *EmployeeServiceUpdateEmployeeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmployeeServiceUpdateEmployeeResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceUpdateEmployeeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceUpdateEmployeeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateEmployeeResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EmployeeServiceUpdateEmployeeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEmployee_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceUpdateEmployeeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EmployeeServiceUpdateEmployeeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceUpdateEmployeeResult(%+v)", *p)

}

type EmployeeServiceDeleteEmployeeArgs struct {
	Request *DeleteEmployeeRequest `thrift:"request,1"`
}

func NewEmployeeServiceDeleteEmployeeArgs() *EmployeeServiceDeleteEmployeeArgs {
	return &EmployeeServiceDeleteEmployeeArgs{}
}

func (p *EmployeeServiceDeleteEmployeeArgs) InitDefault() {
}

var EmployeeServiceDeleteEmployeeArgs_Request_DEFAULT *DeleteEmployeeRequest

func (p *EmployeeServiceDeleteEmployeeArgs) GetRequest() (v *DeleteEmployeeRequest) {
	if !p.IsSetRequest() {
		return EmployeeServiceDeleteEmployeeArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_EmployeeServiceDeleteEmployeeArgs = map[int16]string{
	1: "request",
}

func (p *EmployeeServiceDeleteEmployeeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EmployeeServiceDeleteEmployeeArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceDeleteEmployeeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceDeleteEmployeeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteEmployeeRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EmployeeServiceDeleteEmployeeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteEmployee_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceDeleteEmployeeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EmployeeServiceDeleteEmployeeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceDeleteEmployeeArgs(%+v)", *p)

}

type EmployeeServiceDeleteEmployeeResult struct {
	Success *DeleteEmployeeResponse `thrift:"success,0,optional"`
}

func NewEmployeeServiceDeleteEmployeeResult() *EmployeeServiceDeleteEmployeeResult {
	return &EmployeeServiceDeleteEmployeeResult{}
}

func (p *EmployeeServiceDeleteEmployeeResult) InitDefault() {
}

var EmployeeServiceDeleteEmployeeResult_Success_DEFAULT *DeleteEmployeeResponse

func (p *EmployeeServiceDeleteEmployeeResult) GetSuccess() (v *DeleteEmployeeResponse) {
	if !p.IsSetSuccess() {
		return EmployeeServiceDeleteEmployeeResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EmployeeServiceDeleteEmployeeResult = map[int16]string{
	0: "success",
}

func (p *EmployeeServiceDeleteEmployeeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmployeeServiceDeleteEmployeeResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceDeleteEmployeeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceDeleteEmployeeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteEmployeeResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EmployeeServiceDeleteEmployeeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteEmployee_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceDeleteEmployeeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EmployeeServiceDeleteEmployeeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceDeleteEmployeeResult(%+v)", *p)

}

type EmployeeServiceListEmployeesArgs struct {
	Request *ListEmployeeRequest `thrift:"request,1"`
}

func NewEmployeeServiceListEmployeesArgs() *EmployeeServiceListEmployeesArgs {
	return &EmployeeServiceListEmployeesArgs{}
}

func (p *EmployeeServiceListEmployeesArgs) InitDefault() {
}

var EmployeeServiceListEmployeesArgs_Request_DEFAULT *ListEmployeeRequest

func (p *EmployeeServiceListEmployeesArgs) GetRequest() (v *ListEmployeeRequest) {
	if !p.IsSetRequest() {
		return EmployeeServiceListEmployeesArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_EmployeeServiceListEmployeesArgs = map[int16]string{
	1: "request",
}

func (p *EmployeeServiceListEmployeesArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EmployeeServiceListEmployeesArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceListEmployeesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceListEmployeesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListEmployeeRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EmployeeServiceListEmployeesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEmployees_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceListEmployeesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EmployeeServiceListEmployeesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceListEmployeesArgs(%+v)", *p)

}

type EmployeeServiceListEmployeesResult struct {
	Success *ListEmployeeResponse `thrift:"success,0,optional"`
}

func NewEmployeeServiceListEmployeesResult() *EmployeeServiceListEmployeesResult {
	return &EmployeeServiceListEmployeesResult{}
}

func (p *EmployeeServiceListEmployeesResult) InitDefault() {
}

var EmployeeServiceListEmployeesResult_Success_DEFAULT *ListEmployeeResponse

func (p *EmployeeServiceListEmployeesResult) GetSuccess() (v *ListEmployeeResponse) {
	if !p.IsSetSuccess() {
		return EmployeeServiceListEmployeesResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EmployeeServiceListEmployeesResult = map[int16]string{
	0: "success",
}

func (p *EmployeeServiceListEmployeesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmployeeServiceListEmployeesResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceListEmployeesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceListEmployeesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListEmployeeResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EmployeeServiceListEmployeesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEmployees_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceListEmployeesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EmployeeServiceListEmployeesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceListEmployeesResult(%+v)", *p)

}

type EmployeeServiceChangeEmployeeDepartmentArgs struct {
	Request *ChangeEmployeeDepartmentRequest `thrift:"request,1"`
}

func NewEmployeeServiceChangeEmployeeDepartmentArgs() *EmployeeServiceChangeEmployeeDepartmentArgs {
	return &EmployeeServiceChangeEmployeeDepartmentArgs{}
}

func (p *EmployeeServiceChangeEmployeeDepartmentArgs) InitDefault() {
}

var EmployeeServiceChangeEmployeeDepartmentArgs_Request_DEFAULT *ChangeEmployeeDepartmentRequest

func (p *EmployeeServiceChangeEmployeeDepartmentArgs) GetRequest() (v *ChangeEmployeeDepartmentRequest) {
	if !p.IsSetRequest() {
		return EmployeeServiceChangeEmployeeDepartmentArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_EmployeeServiceChangeEmployeeDepartmentArgs = map[int16]string{
	1: "request",
}

func (p *EmployeeServiceChangeEmployeeDepartmentArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EmployeeServiceChangeEmployeeDepartmentArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceChangeEmployeeDepartmentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceChangeEmployeeDepartmentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewChangeEmployeeDepartmentRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EmployeeServiceChangeEmployeeDepartmentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChangeEmployeeDepartment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceChangeEmployeeDepartmentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EmployeeServiceChangeEmployeeDepartmentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceChangeEmployeeDepartmentArgs(%+v)", *p)

}

type EmployeeServiceChangeEmployeeDepartmentResult struct {
	Success *ChangeEmployeeDepartmentResponse `thrift:"success,0,optional"`
}

func NewEmployeeServiceChangeEmployeeDepartmentResult() *EmployeeServiceChangeEmployeeDepartmentResult {
	return &EmployeeServiceChangeEmployeeDepartmentResult{}
}

func (p *EmployeeServiceChangeEmployeeDepartmentResult) InitDefault() {
}

var EmployeeServiceChangeEmployeeDepartmentResult_Success_DEFAULT *ChangeEmployeeDepartmentResponse

func (p *EmployeeServiceChangeEmployeeDepartmentResult) GetSuccess() (v *ChangeEmployeeDepartmentResponse) {
	if !p.IsSetSuccess() {
		return EmployeeServiceChangeEmployeeDepartmentResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EmployeeServiceChangeEmployeeDepartmentResult = map[int16]string{
	0: "success",
}

func (p *EmployeeServiceChangeEmployeeDepartmentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmployeeServiceChangeEmployeeDepartmentResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceChangeEmployeeDepartmentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceChangeEmployeeDepartmentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewChangeEmployeeDepartmentResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EmployeeServiceChangeEmployeeDepartmentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChangeEmployeeDepartment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceChangeEmployeeDepartmentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EmployeeServiceChangeEmployeeDepartmentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceChangeEmployeeDepartmentResult(%+v)", *p)

}

type EmployeeServiceResignEmployeeArgs struct {
	Request *ResignEmployeeRequest `thrift:"request,1"`
}

func NewEmployeeServiceResignEmployeeArgs() *EmployeeServiceResignEmployeeArgs {
	return &EmployeeServiceResignEmployeeArgs{}
}

func (p *EmployeeServiceResignEmployeeArgs) InitDefault() {
}

var EmployeeServiceResignEmployeeArgs_Request_DEFAULT *ResignEmployeeRequest

func (p *EmployeeServiceResignEmployeeArgs) GetRequest() (v *ResignEmployeeRequest) {
	if !p.IsSetRequest() {
		return EmployeeServiceResignEmployeeArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_EmployeeServiceResignEmployeeArgs = map[int16]string{
	1: "request",
}

func (p *EmployeeServiceResignEmployeeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EmployeeServiceResignEmployeeArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceResignEmployeeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceResignEmployeeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewResignEmployeeRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EmployeeServiceResignEmployeeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ResignEmployee_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceResignEmployeeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EmployeeServiceResignEmployeeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceResignEmployeeArgs(%+v)", *p)

}

type EmployeeServiceResignEmployeeResult struct {
	Success *ResignEmployeeResponse `thrift:"success,0,optional"`
}

func NewEmployeeServiceResignEmployeeResult() *EmployeeServiceResignEmployeeResult {
	return &EmployeeServiceResignEmployeeResult{}
}

func (p *EmployeeServiceResignEmployeeResult) InitDefault() {
}

var EmployeeServiceResignEmployeeResult_Success_DEFAULT *ResignEmployeeResponse

func (p *EmployeeServiceResignEmployeeResult) GetSuccess() (v *ResignEmployeeResponse) {
	if !p.IsSetSuccess() {
		return EmployeeServiceResignEmployeeResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EmployeeServiceResignEmployeeResult = map[int16]string{
	0: "success",
}

func (p *EmployeeServiceResignEmployeeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmployeeServiceResignEmployeeResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceResignEmployeeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceResignEmployeeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewResignEmployeeResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EmployeeServiceResignEmployeeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ResignEmployee_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceResignEmployeeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EmployeeServiceResignEmployeeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceResignEmployeeResult(%+v)", *p)

}

type EmployeeServiceRestoreEmployeeArgs struct {
	Request *RestoreEmployeeRequest `thrift:"request,1"`
}

func NewEmployeeServiceRestoreEmployeeArgs() *EmployeeServiceRestoreEmployeeArgs {
	return &EmployeeServiceRestoreEmployeeArgs{}
}

func (p *EmployeeServiceRestoreEmployeeArgs) InitDefault() {
}

var EmployeeServiceRestoreEmployeeArgs_Request_DEFAULT *RestoreEmployeeRequest

func (p *EmployeeServiceRestoreEmployeeArgs) GetRequest() (v *RestoreEmployeeRequest) {
	if !p.IsSetRequest() {
		return EmployeeServiceRestoreEmployeeArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_EmployeeServiceRestoreEmployeeArgs = map[int16]string{
	1: "request",
}

func (p *EmployeeServiceRestoreEmployeeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EmployeeServiceRestoreEmployeeArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceRestoreEmployeeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceRestoreEmployeeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewRestoreEmployeeRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EmployeeServiceRestoreEmployeeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RestoreEmployee_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceRestoreEmployeeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EmployeeServiceRestoreEmployeeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceRestoreEmployeeArgs(%+v)", *p)

}

type EmployeeServiceRestoreEmployeeResult struct {
	Success *RestoreEmployeeResponse `thrift:"success,0,optional"`
}

func NewEmployeeServiceRestoreEmployeeResult() *EmployeeServiceRestoreEmployeeResult {
	return &EmployeeServiceRestoreEmployeeResult{}
}

func (p *EmployeeServiceRestoreEmployeeResult) InitDefault() {
}

var EmployeeServiceRestoreEmployeeResult_Success_DEFAULT *RestoreEmployeeResponse

func (p *EmployeeServiceRestoreEmployeeResult) GetSuccess() (v *RestoreEmployeeResponse) {
	if !p.IsSetSuccess() {
		return EmployeeServiceRestoreEmployeeResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_EmployeeServiceRestoreEmployeeResult = map[int16]string{
	0: "success",
}

func (p *EmployeeServiceRestoreEmployeeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmployeeServiceRestoreEmployeeResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceRestoreEmployeeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceRestoreEmployeeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewRestoreEmployeeResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EmployeeServiceRestoreEmployeeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RestoreEmployee_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceRestoreEmployeeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EmployeeServiceRestoreEmployeeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceRestoreEmployeeResult(%+v)", *p)

}
