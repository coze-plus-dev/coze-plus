/*
 * Copyright 2025 coze-plus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package common

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

type PermissionDomain int64

const (
	PermissionDomain_GLOBAL PermissionDomain = 1
	PermissionDomain_SPACE  PermissionDomain = 2
)

func (p PermissionDomain) String() string {
	switch p {
	case PermissionDomain_GLOBAL:
		return "GLOBAL"
	case PermissionDomain_SPACE:
		return "SPACE"
	}
	return "<UNSET>"
}

func PermissionDomainFromString(s string) (PermissionDomain, error) {
	switch s {
	case "GLOBAL":
		return PermissionDomain_GLOBAL, nil
	case "SPACE":
		return PermissionDomain_SPACE, nil
	}
	return PermissionDomain(0), fmt.Errorf("not a valid PermissionDomain string")
}

func PermissionDomainPtr(v PermissionDomain) *PermissionDomain { return &v }
func (p *PermissionDomain) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = PermissionDomain(result.Int64)
	return
}

func (p *PermissionDomain) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type RoleType int64

const (
	RoleType_SUPER_ADMIN RoleType = 0
	RoleType_SPACE_ROLE  RoleType = 1
	RoleType_CUSTOM_ROLE RoleType = 2
)

func (p RoleType) String() string {
	switch p {
	case RoleType_SUPER_ADMIN:
		return "SUPER_ADMIN"
	case RoleType_SPACE_ROLE:
		return "SPACE_ROLE"
	case RoleType_CUSTOM_ROLE:
		return "CUSTOM_ROLE"
	}
	return "<UNSET>"
}

func RoleTypeFromString(s string) (RoleType, error) {
	switch s {
	case "SUPER_ADMIN":
		return RoleType_SUPER_ADMIN, nil
	case "SPACE_ROLE":
		return RoleType_SPACE_ROLE, nil
	case "CUSTOM_ROLE":
		return RoleType_CUSTOM_ROLE, nil
	}
	return RoleType(0), fmt.Errorf("not a valid RoleType string")
}

func RoleTypePtr(v RoleType) *RoleType { return &v }
func (p *RoleType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = RoleType(result.Int64)
	return
}

func (p *RoleType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type SpaceRoleType int64

const (
	SpaceRoleType_OWNER  SpaceRoleType = 1
	SpaceRoleType_ADMIN  SpaceRoleType = 2
	SpaceRoleType_MEMBER SpaceRoleType = 3
)

func (p SpaceRoleType) String() string {
	switch p {
	case SpaceRoleType_OWNER:
		return "OWNER"
	case SpaceRoleType_ADMIN:
		return "ADMIN"
	case SpaceRoleType_MEMBER:
		return "MEMBER"
	}
	return "<UNSET>"
}

func SpaceRoleTypeFromString(s string) (SpaceRoleType, error) {
	switch s {
	case "OWNER":
		return SpaceRoleType_OWNER, nil
	case "ADMIN":
		return SpaceRoleType_ADMIN, nil
	case "MEMBER":
		return SpaceRoleType_MEMBER, nil
	}
	return SpaceRoleType(0), fmt.Errorf("not a valid SpaceRoleType string")
}

func SpaceRoleTypePtr(v SpaceRoleType) *SpaceRoleType { return &v }
func (p *SpaceRoleType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = SpaceRoleType(result.Int64)
	return
}

func (p *SpaceRoleType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type CasbinPolicyType int64

const (
	CasbinPolicyType_POLICY   CasbinPolicyType = 1
	CasbinPolicyType_GROUPING CasbinPolicyType = 2
)

func (p CasbinPolicyType) String() string {
	switch p {
	case CasbinPolicyType_POLICY:
		return "POLICY"
	case CasbinPolicyType_GROUPING:
		return "GROUPING"
	}
	return "<UNSET>"
}

func CasbinPolicyTypeFromString(s string) (CasbinPolicyType, error) {
	switch s {
	case "POLICY":
		return CasbinPolicyType_POLICY, nil
	case "GROUPING":
		return CasbinPolicyType_GROUPING, nil
	}
	return CasbinPolicyType(0), fmt.Errorf("not a valid CasbinPolicyType string")
}

func CasbinPolicyTypePtr(v CasbinPolicyType) *CasbinPolicyType { return &v }
func (p *CasbinPolicyType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = CasbinPolicyType(result.Int64)
	return
}

func (p *CasbinPolicyType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type PermissionEffect int64

const (
	PermissionEffect_ALLOW PermissionEffect = 1
	PermissionEffect_DENY  PermissionEffect = 2
)

func (p PermissionEffect) String() string {
	switch p {
	case PermissionEffect_ALLOW:
		return "ALLOW"
	case PermissionEffect_DENY:
		return "DENY"
	}
	return "<UNSET>"
}

func PermissionEffectFromString(s string) (PermissionEffect, error) {
	switch s {
	case "ALLOW":
		return PermissionEffect_ALLOW, nil
	case "DENY":
		return PermissionEffect_DENY, nil
	}
	return PermissionEffect(0), fmt.Errorf("not a valid PermissionEffect string")
}

func PermissionEffectPtr(v PermissionEffect) *PermissionEffect { return &v }
func (p *PermissionEffect) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = PermissionEffect(result.Int64)
	return
}

func (p *PermissionEffect) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Status int64

const (
	Status_DISABLED Status = 0
	Status_ENABLED  Status = 1
)

func (p Status) String() string {
	switch p {
	case Status_DISABLED:
		return "DISABLED"
	case Status_ENABLED:
		return "ENABLED"
	}
	return "<UNSET>"
}

func StatusFromString(s string) (Status, error) {
	switch s {
	case "DISABLED":
		return Status_DISABLED, nil
	case "ENABLED":
		return Status_ENABLED, nil
	}
	return Status(0), fmt.Errorf("not a valid Status string")
}

func StatusPtr(v Status) *Status { return &v }
func (p *Status) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = Status(result.Int64)
	return
}

func (p *Status) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type UserStatus int64

const (
	UserStatus_ENABLED  UserStatus = 0
	UserStatus_DISABLED UserStatus = 1
)

func (p UserStatus) String() string {
	switch p {
	case UserStatus_ENABLED:
		return "ENABLED"
	case UserStatus_DISABLED:
		return "DISABLED"
	}
	return "<UNSET>"
}

func UserStatusFromString(s string) (UserStatus, error) {
	switch s {
	case "ENABLED":
		return UserStatus_ENABLED, nil
	case "DISABLED":
		return UserStatus_DISABLED, nil
	}
	return UserStatus(0), fmt.Errorf("not a valid UserStatus string")
}

func UserStatusPtr(v UserStatus) *UserStatus { return &v }
func (p *UserStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = UserStatus(result.Int64)
	return
}

func (p *UserStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type PermissionTemplateData struct {
	ID           *int64  `thrift:"id,1,optional" form:"id" json:"id,string,omitempty"`
	TemplateCode *string `thrift:"template_code,2,optional" form:"template_code" json:"template_code,omitempty"`
	TemplateName *string `thrift:"template_name,3,optional" form:"template_name" json:"template_name,omitempty"`
	Domain       *string `thrift:"domain,4,optional" form:"domain" json:"domain,omitempty"`
	Resource     *string `thrift:"resource,5,optional" form:"resource" json:"resource,omitempty"`
	ResourceName *string `thrift:"resource_name,6,optional" form:"resource_name" json:"resource_name,omitempty"`
	Action       *string `thrift:"action,7,optional" form:"action" json:"action,omitempty"`
	ActionName   *string `thrift:"action_name,8,optional" form:"action_name" json:"action_name,omitempty"`
	Description  *string `thrift:"description,9,optional" form:"description" json:"description,omitempty"`
	IsDefault    *int32  `thrift:"is_default,10,optional" form:"is_default" json:"is_default,omitempty"`
	SortOrder    *int32  `thrift:"sort_order,11,optional" form:"sort_order" json:"sort_order,omitempty"`
	IsActive     *int32  `thrift:"is_active,12,optional" form:"is_active" json:"is_active,omitempty"`
}

func NewPermissionTemplateData() *PermissionTemplateData {
	return &PermissionTemplateData{}
}

func (p *PermissionTemplateData) InitDefault() {
}

var PermissionTemplateData_ID_DEFAULT int64

func (p *PermissionTemplateData) GetID() (v int64) {
	if !p.IsSetID() {
		return PermissionTemplateData_ID_DEFAULT
	}
	return *p.ID
}

var PermissionTemplateData_TemplateCode_DEFAULT string

func (p *PermissionTemplateData) GetTemplateCode() (v string) {
	if !p.IsSetTemplateCode() {
		return PermissionTemplateData_TemplateCode_DEFAULT
	}
	return *p.TemplateCode
}

var PermissionTemplateData_TemplateName_DEFAULT string

func (p *PermissionTemplateData) GetTemplateName() (v string) {
	if !p.IsSetTemplateName() {
		return PermissionTemplateData_TemplateName_DEFAULT
	}
	return *p.TemplateName
}

var PermissionTemplateData_Domain_DEFAULT string

func (p *PermissionTemplateData) GetDomain() (v string) {
	if !p.IsSetDomain() {
		return PermissionTemplateData_Domain_DEFAULT
	}
	return *p.Domain
}

var PermissionTemplateData_Resource_DEFAULT string

func (p *PermissionTemplateData) GetResource() (v string) {
	if !p.IsSetResource() {
		return PermissionTemplateData_Resource_DEFAULT
	}
	return *p.Resource
}

var PermissionTemplateData_ResourceName_DEFAULT string

func (p *PermissionTemplateData) GetResourceName() (v string) {
	if !p.IsSetResourceName() {
		return PermissionTemplateData_ResourceName_DEFAULT
	}
	return *p.ResourceName
}

var PermissionTemplateData_Action_DEFAULT string

func (p *PermissionTemplateData) GetAction() (v string) {
	if !p.IsSetAction() {
		return PermissionTemplateData_Action_DEFAULT
	}
	return *p.Action
}

var PermissionTemplateData_ActionName_DEFAULT string

func (p *PermissionTemplateData) GetActionName() (v string) {
	if !p.IsSetActionName() {
		return PermissionTemplateData_ActionName_DEFAULT
	}
	return *p.ActionName
}

var PermissionTemplateData_Description_DEFAULT string

func (p *PermissionTemplateData) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return PermissionTemplateData_Description_DEFAULT
	}
	return *p.Description
}

var PermissionTemplateData_IsDefault_DEFAULT int32

func (p *PermissionTemplateData) GetIsDefault() (v int32) {
	if !p.IsSetIsDefault() {
		return PermissionTemplateData_IsDefault_DEFAULT
	}
	return *p.IsDefault
}

var PermissionTemplateData_SortOrder_DEFAULT int32

func (p *PermissionTemplateData) GetSortOrder() (v int32) {
	if !p.IsSetSortOrder() {
		return PermissionTemplateData_SortOrder_DEFAULT
	}
	return *p.SortOrder
}

var PermissionTemplateData_IsActive_DEFAULT int32

func (p *PermissionTemplateData) GetIsActive() (v int32) {
	if !p.IsSetIsActive() {
		return PermissionTemplateData_IsActive_DEFAULT
	}
	return *p.IsActive
}

var fieldIDToName_PermissionTemplateData = map[int16]string{
	1:  "id",
	2:  "template_code",
	3:  "template_name",
	4:  "domain",
	5:  "resource",
	6:  "resource_name",
	7:  "action",
	8:  "action_name",
	9:  "description",
	10: "is_default",
	11: "sort_order",
	12: "is_active",
}

func (p *PermissionTemplateData) IsSetID() bool {
	return p.ID != nil
}

func (p *PermissionTemplateData) IsSetTemplateCode() bool {
	return p.TemplateCode != nil
}

func (p *PermissionTemplateData) IsSetTemplateName() bool {
	return p.TemplateName != nil
}

func (p *PermissionTemplateData) IsSetDomain() bool {
	return p.Domain != nil
}

func (p *PermissionTemplateData) IsSetResource() bool {
	return p.Resource != nil
}

func (p *PermissionTemplateData) IsSetResourceName() bool {
	return p.ResourceName != nil
}

func (p *PermissionTemplateData) IsSetAction() bool {
	return p.Action != nil
}

func (p *PermissionTemplateData) IsSetActionName() bool {
	return p.ActionName != nil
}

func (p *PermissionTemplateData) IsSetDescription() bool {
	return p.Description != nil
}

func (p *PermissionTemplateData) IsSetIsDefault() bool {
	return p.IsDefault != nil
}

func (p *PermissionTemplateData) IsSetSortOrder() bool {
	return p.SortOrder != nil
}

func (p *PermissionTemplateData) IsSetIsActive() bool {
	return p.IsActive != nil
}

func (p *PermissionTemplateData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionTemplateData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionTemplateData) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *PermissionTemplateData) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TemplateCode = _field
	return nil
}
func (p *PermissionTemplateData) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TemplateName = _field
	return nil
}
func (p *PermissionTemplateData) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Domain = _field
	return nil
}
func (p *PermissionTemplateData) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Resource = _field
	return nil
}
func (p *PermissionTemplateData) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ResourceName = _field
	return nil
}
func (p *PermissionTemplateData) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Action = _field
	return nil
}
func (p *PermissionTemplateData) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ActionName = _field
	return nil
}
func (p *PermissionTemplateData) ReadField9(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *PermissionTemplateData) ReadField10(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsDefault = _field
	return nil
}
func (p *PermissionTemplateData) ReadField11(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SortOrder = _field
	return nil
}
func (p *PermissionTemplateData) ReadField12(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsActive = _field
	return nil
}

func (p *PermissionTemplateData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PermissionTemplateData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionTemplateData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *PermissionTemplateData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTemplateCode() {
		if err = oprot.WriteFieldBegin("template_code", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TemplateCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *PermissionTemplateData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTemplateName() {
		if err = oprot.WriteFieldBegin("template_name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TemplateName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *PermissionTemplateData) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDomain() {
		if err = oprot.WriteFieldBegin("domain", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Domain); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *PermissionTemplateData) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetResource() {
		if err = oprot.WriteFieldBegin("resource", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Resource); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *PermissionTemplateData) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetResourceName() {
		if err = oprot.WriteFieldBegin("resource_name", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ResourceName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *PermissionTemplateData) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetAction() {
		if err = oprot.WriteFieldBegin("action", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Action); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *PermissionTemplateData) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetActionName() {
		if err = oprot.WriteFieldBegin("action_name", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ActionName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *PermissionTemplateData) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}
func (p *PermissionTemplateData) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsDefault() {
		if err = oprot.WriteFieldBegin("is_default", thrift.I32, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.IsDefault); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *PermissionTemplateData) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSortOrder() {
		if err = oprot.WriteFieldBegin("sort_order", thrift.I32, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SortOrder); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *PermissionTemplateData) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsActive() {
		if err = oprot.WriteFieldBegin("is_active", thrift.I32, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.IsActive); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *PermissionTemplateData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionTemplateData(%+v)", *p)

}

type PermissionResourceGroup struct {
	Resource     *string                   `thrift:"resource,1,optional" form:"resource" json:"resource,omitempty"`
	ResourceName *string                   `thrift:"resource_name,2,optional" form:"resource_name" json:"resource_name,omitempty"`
	Actions      []*PermissionTemplateData `thrift:"actions,3,optional" form:"actions" json:"actions,omitempty"`
}

func NewPermissionResourceGroup() *PermissionResourceGroup {
	return &PermissionResourceGroup{}
}

func (p *PermissionResourceGroup) InitDefault() {
}

var PermissionResourceGroup_Resource_DEFAULT string

func (p *PermissionResourceGroup) GetResource() (v string) {
	if !p.IsSetResource() {
		return PermissionResourceGroup_Resource_DEFAULT
	}
	return *p.Resource
}

var PermissionResourceGroup_ResourceName_DEFAULT string

func (p *PermissionResourceGroup) GetResourceName() (v string) {
	if !p.IsSetResourceName() {
		return PermissionResourceGroup_ResourceName_DEFAULT
	}
	return *p.ResourceName
}

var PermissionResourceGroup_Actions_DEFAULT []*PermissionTemplateData

func (p *PermissionResourceGroup) GetActions() (v []*PermissionTemplateData) {
	if !p.IsSetActions() {
		return PermissionResourceGroup_Actions_DEFAULT
	}
	return p.Actions
}

var fieldIDToName_PermissionResourceGroup = map[int16]string{
	1: "resource",
	2: "resource_name",
	3: "actions",
}

func (p *PermissionResourceGroup) IsSetResource() bool {
	return p.Resource != nil
}

func (p *PermissionResourceGroup) IsSetResourceName() bool {
	return p.ResourceName != nil
}

func (p *PermissionResourceGroup) IsSetActions() bool {
	return p.Actions != nil
}

func (p *PermissionResourceGroup) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionResourceGroup[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionResourceGroup) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Resource = _field
	return nil
}
func (p *PermissionResourceGroup) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ResourceName = _field
	return nil
}
func (p *PermissionResourceGroup) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*PermissionTemplateData, 0, size)
	values := make([]PermissionTemplateData, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Actions = _field
	return nil
}

func (p *PermissionResourceGroup) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PermissionResourceGroup"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionResourceGroup) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetResource() {
		if err = oprot.WriteFieldBegin("resource", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Resource); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *PermissionResourceGroup) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetResourceName() {
		if err = oprot.WriteFieldBegin("resource_name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ResourceName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *PermissionResourceGroup) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetActions() {
		if err = oprot.WriteFieldBegin("actions", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Actions)); err != nil {
			return err
		}
		for _, v := range p.Actions {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PermissionResourceGroup) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionResourceGroup(%+v)", *p)

}

type PermissionTemplateGroup struct {
	Domain     *string                    `thrift:"domain,1,optional" form:"domain" json:"domain,omitempty"`
	DomainName *string                    `thrift:"domain_name,2,optional" form:"domain_name" json:"domain_name,omitempty"`
	Resources  []*PermissionResourceGroup `thrift:"resources,3,optional" form:"resources" json:"resources,omitempty"`
}

func NewPermissionTemplateGroup() *PermissionTemplateGroup {
	return &PermissionTemplateGroup{}
}

func (p *PermissionTemplateGroup) InitDefault() {
}

var PermissionTemplateGroup_Domain_DEFAULT string

func (p *PermissionTemplateGroup) GetDomain() (v string) {
	if !p.IsSetDomain() {
		return PermissionTemplateGroup_Domain_DEFAULT
	}
	return *p.Domain
}

var PermissionTemplateGroup_DomainName_DEFAULT string

func (p *PermissionTemplateGroup) GetDomainName() (v string) {
	if !p.IsSetDomainName() {
		return PermissionTemplateGroup_DomainName_DEFAULT
	}
	return *p.DomainName
}

var PermissionTemplateGroup_Resources_DEFAULT []*PermissionResourceGroup

func (p *PermissionTemplateGroup) GetResources() (v []*PermissionResourceGroup) {
	if !p.IsSetResources() {
		return PermissionTemplateGroup_Resources_DEFAULT
	}
	return p.Resources
}

var fieldIDToName_PermissionTemplateGroup = map[int16]string{
	1: "domain",
	2: "domain_name",
	3: "resources",
}

func (p *PermissionTemplateGroup) IsSetDomain() bool {
	return p.Domain != nil
}

func (p *PermissionTemplateGroup) IsSetDomainName() bool {
	return p.DomainName != nil
}

func (p *PermissionTemplateGroup) IsSetResources() bool {
	return p.Resources != nil
}

func (p *PermissionTemplateGroup) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionTemplateGroup[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionTemplateGroup) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Domain = _field
	return nil
}
func (p *PermissionTemplateGroup) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DomainName = _field
	return nil
}
func (p *PermissionTemplateGroup) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*PermissionResourceGroup, 0, size)
	values := make([]PermissionResourceGroup, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Resources = _field
	return nil
}

func (p *PermissionTemplateGroup) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PermissionTemplateGroup"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionTemplateGroup) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDomain() {
		if err = oprot.WriteFieldBegin("domain", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Domain); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *PermissionTemplateGroup) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDomainName() {
		if err = oprot.WriteFieldBegin("domain_name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DomainName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *PermissionTemplateGroup) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetResources() {
		if err = oprot.WriteFieldBegin("resources", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Resources)); err != nil {
			return err
		}
		for _, v := range p.Resources {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PermissionTemplateGroup) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionTemplateGroup(%+v)", *p)

}
