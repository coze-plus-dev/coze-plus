/*
 * Copyright 2025 coze-plus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by thriftgo (0.4.2). DO NOT EDIT.

package permission

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

type PermissionService interface {
	CreateRole(ctx context.Context, req *CreateRoleRequest) (r *CreateRoleResponse, err error)

	UpdateRole(ctx context.Context, req *UpdateRoleRequest) (r *UpdateRoleResponse, err error)

	DeleteRole(ctx context.Context, req *DeleteRoleRequest) (r *DeleteRoleResponse, err error)

	GetRole(ctx context.Context, req *GetRoleRequest) (r *GetRoleResponse, err error)

	ListRoles(ctx context.Context, req *ListRolesRequest) (r *ListRolesResponse, err error)

	ListPermissionTemplates(ctx context.Context, req *ListPermissionTemplatesRequest) (r *ListPermissionTemplatesResponse, err error)

	ListUsers(ctx context.Context, req *ListUsersRequest) (r *ListUsersResponse, err error)

	UpdateUserStatus(ctx context.Context, req *UpdateUserStatusRequest) (r *UpdateUserStatusResponse, err error)

	AssignUserMultipleRoles(ctx context.Context, req *AssignUserMultipleRolesRequest) (r *AssignUserMultipleRolesResponse, err error)

	UnassignUserRoles(ctx context.Context, req *UnassignUserRolesRequest) (r *UnassignUserRolesResponse, err error)

	GetUserRoles(ctx context.Context, req *GetUserRolesRequest) (r *GetUserRolesResponse, err error)

	ResetUserPassword(ctx context.Context, req *ResetUserPasswordRequest) (r *ResetUserPasswordResponse, err error)
}

type PermissionServiceClient struct {
	c thrift.TClient
}

func NewPermissionServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PermissionServiceClient {
	return &PermissionServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewPermissionServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PermissionServiceClient {
	return &PermissionServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewPermissionServiceClient(c thrift.TClient) *PermissionServiceClient {
	return &PermissionServiceClient{
		c: c,
	}
}

func (p *PermissionServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *PermissionServiceClient) CreateRole(ctx context.Context, req *CreateRoleRequest) (r *CreateRoleResponse, err error) {
	var _args PermissionServiceCreateRoleArgs
	_args.Req = req
	var _result PermissionServiceCreateRoleResult
	if err = p.Client_().Call(ctx, "CreateRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PermissionServiceClient) UpdateRole(ctx context.Context, req *UpdateRoleRequest) (r *UpdateRoleResponse, err error) {
	var _args PermissionServiceUpdateRoleArgs
	_args.Req = req
	var _result PermissionServiceUpdateRoleResult
	if err = p.Client_().Call(ctx, "UpdateRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PermissionServiceClient) DeleteRole(ctx context.Context, req *DeleteRoleRequest) (r *DeleteRoleResponse, err error) {
	var _args PermissionServiceDeleteRoleArgs
	_args.Req = req
	var _result PermissionServiceDeleteRoleResult
	if err = p.Client_().Call(ctx, "DeleteRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PermissionServiceClient) GetRole(ctx context.Context, req *GetRoleRequest) (r *GetRoleResponse, err error) {
	var _args PermissionServiceGetRoleArgs
	_args.Req = req
	var _result PermissionServiceGetRoleResult
	if err = p.Client_().Call(ctx, "GetRole", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PermissionServiceClient) ListRoles(ctx context.Context, req *ListRolesRequest) (r *ListRolesResponse, err error) {
	var _args PermissionServiceListRolesArgs
	_args.Req = req
	var _result PermissionServiceListRolesResult
	if err = p.Client_().Call(ctx, "ListRoles", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PermissionServiceClient) ListPermissionTemplates(ctx context.Context, req *ListPermissionTemplatesRequest) (r *ListPermissionTemplatesResponse, err error) {
	var _args PermissionServiceListPermissionTemplatesArgs
	_args.Req = req
	var _result PermissionServiceListPermissionTemplatesResult
	if err = p.Client_().Call(ctx, "ListPermissionTemplates", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PermissionServiceClient) ListUsers(ctx context.Context, req *ListUsersRequest) (r *ListUsersResponse, err error) {
	var _args PermissionServiceListUsersArgs
	_args.Req = req
	var _result PermissionServiceListUsersResult
	if err = p.Client_().Call(ctx, "ListUsers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PermissionServiceClient) UpdateUserStatus(ctx context.Context, req *UpdateUserStatusRequest) (r *UpdateUserStatusResponse, err error) {
	var _args PermissionServiceUpdateUserStatusArgs
	_args.Req = req
	var _result PermissionServiceUpdateUserStatusResult
	if err = p.Client_().Call(ctx, "UpdateUserStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PermissionServiceClient) AssignUserMultipleRoles(ctx context.Context, req *AssignUserMultipleRolesRequest) (r *AssignUserMultipleRolesResponse, err error) {
	var _args PermissionServiceAssignUserMultipleRolesArgs
	_args.Req = req
	var _result PermissionServiceAssignUserMultipleRolesResult
	if err = p.Client_().Call(ctx, "AssignUserMultipleRoles", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PermissionServiceClient) UnassignUserRoles(ctx context.Context, req *UnassignUserRolesRequest) (r *UnassignUserRolesResponse, err error) {
	var _args PermissionServiceUnassignUserRolesArgs
	_args.Req = req
	var _result PermissionServiceUnassignUserRolesResult
	if err = p.Client_().Call(ctx, "UnassignUserRoles", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PermissionServiceClient) GetUserRoles(ctx context.Context, req *GetUserRolesRequest) (r *GetUserRolesResponse, err error) {
	var _args PermissionServiceGetUserRolesArgs
	_args.Req = req
	var _result PermissionServiceGetUserRolesResult
	if err = p.Client_().Call(ctx, "GetUserRoles", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PermissionServiceClient) ResetUserPassword(ctx context.Context, req *ResetUserPasswordRequest) (r *ResetUserPasswordResponse, err error) {
	var _args PermissionServiceResetUserPasswordArgs
	_args.Req = req
	var _result PermissionServiceResetUserPasswordResult
	if err = p.Client_().Call(ctx, "ResetUserPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type PermissionServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      PermissionService
}

func (p *PermissionServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *PermissionServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *PermissionServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewPermissionServiceProcessor(handler PermissionService) *PermissionServiceProcessor {
	self := &PermissionServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateRole", &permissionServiceProcessorCreateRole{handler: handler})
	self.AddToProcessorMap("UpdateRole", &permissionServiceProcessorUpdateRole{handler: handler})
	self.AddToProcessorMap("DeleteRole", &permissionServiceProcessorDeleteRole{handler: handler})
	self.AddToProcessorMap("GetRole", &permissionServiceProcessorGetRole{handler: handler})
	self.AddToProcessorMap("ListRoles", &permissionServiceProcessorListRoles{handler: handler})
	self.AddToProcessorMap("ListPermissionTemplates", &permissionServiceProcessorListPermissionTemplates{handler: handler})
	self.AddToProcessorMap("ListUsers", &permissionServiceProcessorListUsers{handler: handler})
	self.AddToProcessorMap("UpdateUserStatus", &permissionServiceProcessorUpdateUserStatus{handler: handler})
	self.AddToProcessorMap("AssignUserMultipleRoles", &permissionServiceProcessorAssignUserMultipleRoles{handler: handler})
	self.AddToProcessorMap("UnassignUserRoles", &permissionServiceProcessorUnassignUserRoles{handler: handler})
	self.AddToProcessorMap("GetUserRoles", &permissionServiceProcessorGetUserRoles{handler: handler})
	self.AddToProcessorMap("ResetUserPassword", &permissionServiceProcessorResetUserPassword{handler: handler})
	return self
}
func (p *PermissionServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type permissionServiceProcessorCreateRole struct {
	handler PermissionService
}

func (p *permissionServiceProcessorCreateRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PermissionServiceCreateRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateRole", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PermissionServiceCreateRoleResult{}
	var retval *CreateRoleResponse
	if retval, err2 = p.handler.CreateRole(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateRole: "+err2.Error())
		oprot.WriteMessageBegin("CreateRole", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateRole", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type permissionServiceProcessorUpdateRole struct {
	handler PermissionService
}

func (p *permissionServiceProcessorUpdateRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PermissionServiceUpdateRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateRole", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PermissionServiceUpdateRoleResult{}
	var retval *UpdateRoleResponse
	if retval, err2 = p.handler.UpdateRole(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateRole: "+err2.Error())
		oprot.WriteMessageBegin("UpdateRole", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateRole", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type permissionServiceProcessorDeleteRole struct {
	handler PermissionService
}

func (p *permissionServiceProcessorDeleteRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PermissionServiceDeleteRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteRole", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PermissionServiceDeleteRoleResult{}
	var retval *DeleteRoleResponse
	if retval, err2 = p.handler.DeleteRole(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteRole: "+err2.Error())
		oprot.WriteMessageBegin("DeleteRole", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteRole", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type permissionServiceProcessorGetRole struct {
	handler PermissionService
}

func (p *permissionServiceProcessorGetRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PermissionServiceGetRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetRole", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PermissionServiceGetRoleResult{}
	var retval *GetRoleResponse
	if retval, err2 = p.handler.GetRole(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetRole: "+err2.Error())
		oprot.WriteMessageBegin("GetRole", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetRole", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type permissionServiceProcessorListRoles struct {
	handler PermissionService
}

func (p *permissionServiceProcessorListRoles) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PermissionServiceListRolesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListRoles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PermissionServiceListRolesResult{}
	var retval *ListRolesResponse
	if retval, err2 = p.handler.ListRoles(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListRoles: "+err2.Error())
		oprot.WriteMessageBegin("ListRoles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListRoles", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type permissionServiceProcessorListPermissionTemplates struct {
	handler PermissionService
}

func (p *permissionServiceProcessorListPermissionTemplates) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PermissionServiceListPermissionTemplatesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListPermissionTemplates", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PermissionServiceListPermissionTemplatesResult{}
	var retval *ListPermissionTemplatesResponse
	if retval, err2 = p.handler.ListPermissionTemplates(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListPermissionTemplates: "+err2.Error())
		oprot.WriteMessageBegin("ListPermissionTemplates", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListPermissionTemplates", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type permissionServiceProcessorListUsers struct {
	handler PermissionService
}

func (p *permissionServiceProcessorListUsers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PermissionServiceListUsersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListUsers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PermissionServiceListUsersResult{}
	var retval *ListUsersResponse
	if retval, err2 = p.handler.ListUsers(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListUsers: "+err2.Error())
		oprot.WriteMessageBegin("ListUsers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListUsers", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type permissionServiceProcessorUpdateUserStatus struct {
	handler PermissionService
}

func (p *permissionServiceProcessorUpdateUserStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PermissionServiceUpdateUserStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateUserStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PermissionServiceUpdateUserStatusResult{}
	var retval *UpdateUserStatusResponse
	if retval, err2 = p.handler.UpdateUserStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateUserStatus: "+err2.Error())
		oprot.WriteMessageBegin("UpdateUserStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateUserStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type permissionServiceProcessorAssignUserMultipleRoles struct {
	handler PermissionService
}

func (p *permissionServiceProcessorAssignUserMultipleRoles) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PermissionServiceAssignUserMultipleRolesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AssignUserMultipleRoles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PermissionServiceAssignUserMultipleRolesResult{}
	var retval *AssignUserMultipleRolesResponse
	if retval, err2 = p.handler.AssignUserMultipleRoles(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AssignUserMultipleRoles: "+err2.Error())
		oprot.WriteMessageBegin("AssignUserMultipleRoles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AssignUserMultipleRoles", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type permissionServiceProcessorUnassignUserRoles struct {
	handler PermissionService
}

func (p *permissionServiceProcessorUnassignUserRoles) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PermissionServiceUnassignUserRolesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UnassignUserRoles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PermissionServiceUnassignUserRolesResult{}
	var retval *UnassignUserRolesResponse
	if retval, err2 = p.handler.UnassignUserRoles(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UnassignUserRoles: "+err2.Error())
		oprot.WriteMessageBegin("UnassignUserRoles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UnassignUserRoles", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type permissionServiceProcessorGetUserRoles struct {
	handler PermissionService
}

func (p *permissionServiceProcessorGetUserRoles) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PermissionServiceGetUserRolesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetUserRoles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PermissionServiceGetUserRolesResult{}
	var retval *GetUserRolesResponse
	if retval, err2 = p.handler.GetUserRoles(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserRoles: "+err2.Error())
		oprot.WriteMessageBegin("GetUserRoles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetUserRoles", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type permissionServiceProcessorResetUserPassword struct {
	handler PermissionService
}

func (p *permissionServiceProcessorResetUserPassword) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PermissionServiceResetUserPasswordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ResetUserPassword", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PermissionServiceResetUserPasswordResult{}
	var retval *ResetUserPasswordResponse
	if retval, err2 = p.handler.ResetUserPassword(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ResetUserPassword: "+err2.Error())
		oprot.WriteMessageBegin("ResetUserPassword", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ResetUserPassword", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type PermissionServiceCreateRoleArgs struct {
	Req *CreateRoleRequest `thrift:"req,1"`
}

func NewPermissionServiceCreateRoleArgs() *PermissionServiceCreateRoleArgs {
	return &PermissionServiceCreateRoleArgs{}
}

func (p *PermissionServiceCreateRoleArgs) InitDefault() {
}

var PermissionServiceCreateRoleArgs_Req_DEFAULT *CreateRoleRequest

func (p *PermissionServiceCreateRoleArgs) GetReq() (v *CreateRoleRequest) {
	if !p.IsSetReq() {
		return PermissionServiceCreateRoleArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_PermissionServiceCreateRoleArgs = map[int16]string{
	1: "req",
}

func (p *PermissionServiceCreateRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PermissionServiceCreateRoleArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceCreateRoleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceCreateRoleArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateRoleRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PermissionServiceCreateRoleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateRole_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceCreateRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PermissionServiceCreateRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceCreateRoleArgs(%+v)", *p)

}

type PermissionServiceCreateRoleResult struct {
	Success *CreateRoleResponse `thrift:"success,0,optional"`
}

func NewPermissionServiceCreateRoleResult() *PermissionServiceCreateRoleResult {
	return &PermissionServiceCreateRoleResult{}
}

func (p *PermissionServiceCreateRoleResult) InitDefault() {
}

var PermissionServiceCreateRoleResult_Success_DEFAULT *CreateRoleResponse

func (p *PermissionServiceCreateRoleResult) GetSuccess() (v *CreateRoleResponse) {
	if !p.IsSetSuccess() {
		return PermissionServiceCreateRoleResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_PermissionServiceCreateRoleResult = map[int16]string{
	0: "success",
}

func (p *PermissionServiceCreateRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PermissionServiceCreateRoleResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceCreateRoleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceCreateRoleResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateRoleResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PermissionServiceCreateRoleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateRole_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceCreateRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PermissionServiceCreateRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceCreateRoleResult(%+v)", *p)

}

type PermissionServiceUpdateRoleArgs struct {
	Req *UpdateRoleRequest `thrift:"req,1"`
}

func NewPermissionServiceUpdateRoleArgs() *PermissionServiceUpdateRoleArgs {
	return &PermissionServiceUpdateRoleArgs{}
}

func (p *PermissionServiceUpdateRoleArgs) InitDefault() {
}

var PermissionServiceUpdateRoleArgs_Req_DEFAULT *UpdateRoleRequest

func (p *PermissionServiceUpdateRoleArgs) GetReq() (v *UpdateRoleRequest) {
	if !p.IsSetReq() {
		return PermissionServiceUpdateRoleArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_PermissionServiceUpdateRoleArgs = map[int16]string{
	1: "req",
}

func (p *PermissionServiceUpdateRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PermissionServiceUpdateRoleArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceUpdateRoleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceUpdateRoleArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateRoleRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PermissionServiceUpdateRoleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateRole_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceUpdateRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PermissionServiceUpdateRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceUpdateRoleArgs(%+v)", *p)

}

type PermissionServiceUpdateRoleResult struct {
	Success *UpdateRoleResponse `thrift:"success,0,optional"`
}

func NewPermissionServiceUpdateRoleResult() *PermissionServiceUpdateRoleResult {
	return &PermissionServiceUpdateRoleResult{}
}

func (p *PermissionServiceUpdateRoleResult) InitDefault() {
}

var PermissionServiceUpdateRoleResult_Success_DEFAULT *UpdateRoleResponse

func (p *PermissionServiceUpdateRoleResult) GetSuccess() (v *UpdateRoleResponse) {
	if !p.IsSetSuccess() {
		return PermissionServiceUpdateRoleResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_PermissionServiceUpdateRoleResult = map[int16]string{
	0: "success",
}

func (p *PermissionServiceUpdateRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PermissionServiceUpdateRoleResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceUpdateRoleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceUpdateRoleResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateRoleResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PermissionServiceUpdateRoleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateRole_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceUpdateRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PermissionServiceUpdateRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceUpdateRoleResult(%+v)", *p)

}

type PermissionServiceDeleteRoleArgs struct {
	Req *DeleteRoleRequest `thrift:"req,1"`
}

func NewPermissionServiceDeleteRoleArgs() *PermissionServiceDeleteRoleArgs {
	return &PermissionServiceDeleteRoleArgs{}
}

func (p *PermissionServiceDeleteRoleArgs) InitDefault() {
}

var PermissionServiceDeleteRoleArgs_Req_DEFAULT *DeleteRoleRequest

func (p *PermissionServiceDeleteRoleArgs) GetReq() (v *DeleteRoleRequest) {
	if !p.IsSetReq() {
		return PermissionServiceDeleteRoleArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_PermissionServiceDeleteRoleArgs = map[int16]string{
	1: "req",
}

func (p *PermissionServiceDeleteRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PermissionServiceDeleteRoleArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceDeleteRoleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceDeleteRoleArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteRoleRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PermissionServiceDeleteRoleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteRole_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceDeleteRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PermissionServiceDeleteRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceDeleteRoleArgs(%+v)", *p)

}

type PermissionServiceDeleteRoleResult struct {
	Success *DeleteRoleResponse `thrift:"success,0,optional"`
}

func NewPermissionServiceDeleteRoleResult() *PermissionServiceDeleteRoleResult {
	return &PermissionServiceDeleteRoleResult{}
}

func (p *PermissionServiceDeleteRoleResult) InitDefault() {
}

var PermissionServiceDeleteRoleResult_Success_DEFAULT *DeleteRoleResponse

func (p *PermissionServiceDeleteRoleResult) GetSuccess() (v *DeleteRoleResponse) {
	if !p.IsSetSuccess() {
		return PermissionServiceDeleteRoleResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_PermissionServiceDeleteRoleResult = map[int16]string{
	0: "success",
}

func (p *PermissionServiceDeleteRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PermissionServiceDeleteRoleResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceDeleteRoleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceDeleteRoleResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteRoleResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PermissionServiceDeleteRoleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteRole_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceDeleteRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PermissionServiceDeleteRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceDeleteRoleResult(%+v)", *p)

}

type PermissionServiceGetRoleArgs struct {
	Req *GetRoleRequest `thrift:"req,1"`
}

func NewPermissionServiceGetRoleArgs() *PermissionServiceGetRoleArgs {
	return &PermissionServiceGetRoleArgs{}
}

func (p *PermissionServiceGetRoleArgs) InitDefault() {
}

var PermissionServiceGetRoleArgs_Req_DEFAULT *GetRoleRequest

func (p *PermissionServiceGetRoleArgs) GetReq() (v *GetRoleRequest) {
	if !p.IsSetReq() {
		return PermissionServiceGetRoleArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_PermissionServiceGetRoleArgs = map[int16]string{
	1: "req",
}

func (p *PermissionServiceGetRoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PermissionServiceGetRoleArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceGetRoleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceGetRoleArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetRoleRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PermissionServiceGetRoleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRole_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceGetRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PermissionServiceGetRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceGetRoleArgs(%+v)", *p)

}

type PermissionServiceGetRoleResult struct {
	Success *GetRoleResponse `thrift:"success,0,optional"`
}

func NewPermissionServiceGetRoleResult() *PermissionServiceGetRoleResult {
	return &PermissionServiceGetRoleResult{}
}

func (p *PermissionServiceGetRoleResult) InitDefault() {
}

var PermissionServiceGetRoleResult_Success_DEFAULT *GetRoleResponse

func (p *PermissionServiceGetRoleResult) GetSuccess() (v *GetRoleResponse) {
	if !p.IsSetSuccess() {
		return PermissionServiceGetRoleResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_PermissionServiceGetRoleResult = map[int16]string{
	0: "success",
}

func (p *PermissionServiceGetRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PermissionServiceGetRoleResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceGetRoleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceGetRoleResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetRoleResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PermissionServiceGetRoleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRole_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceGetRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PermissionServiceGetRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceGetRoleResult(%+v)", *p)

}

type PermissionServiceListRolesArgs struct {
	Req *ListRolesRequest `thrift:"req,1"`
}

func NewPermissionServiceListRolesArgs() *PermissionServiceListRolesArgs {
	return &PermissionServiceListRolesArgs{}
}

func (p *PermissionServiceListRolesArgs) InitDefault() {
}

var PermissionServiceListRolesArgs_Req_DEFAULT *ListRolesRequest

func (p *PermissionServiceListRolesArgs) GetReq() (v *ListRolesRequest) {
	if !p.IsSetReq() {
		return PermissionServiceListRolesArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_PermissionServiceListRolesArgs = map[int16]string{
	1: "req",
}

func (p *PermissionServiceListRolesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PermissionServiceListRolesArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceListRolesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceListRolesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListRolesRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PermissionServiceListRolesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListRoles_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceListRolesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PermissionServiceListRolesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceListRolesArgs(%+v)", *p)

}

type PermissionServiceListRolesResult struct {
	Success *ListRolesResponse `thrift:"success,0,optional"`
}

func NewPermissionServiceListRolesResult() *PermissionServiceListRolesResult {
	return &PermissionServiceListRolesResult{}
}

func (p *PermissionServiceListRolesResult) InitDefault() {
}

var PermissionServiceListRolesResult_Success_DEFAULT *ListRolesResponse

func (p *PermissionServiceListRolesResult) GetSuccess() (v *ListRolesResponse) {
	if !p.IsSetSuccess() {
		return PermissionServiceListRolesResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_PermissionServiceListRolesResult = map[int16]string{
	0: "success",
}

func (p *PermissionServiceListRolesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PermissionServiceListRolesResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceListRolesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceListRolesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListRolesResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PermissionServiceListRolesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListRoles_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceListRolesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PermissionServiceListRolesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceListRolesResult(%+v)", *p)

}

type PermissionServiceListPermissionTemplatesArgs struct {
	Req *ListPermissionTemplatesRequest `thrift:"req,1"`
}

func NewPermissionServiceListPermissionTemplatesArgs() *PermissionServiceListPermissionTemplatesArgs {
	return &PermissionServiceListPermissionTemplatesArgs{}
}

func (p *PermissionServiceListPermissionTemplatesArgs) InitDefault() {
}

var PermissionServiceListPermissionTemplatesArgs_Req_DEFAULT *ListPermissionTemplatesRequest

func (p *PermissionServiceListPermissionTemplatesArgs) GetReq() (v *ListPermissionTemplatesRequest) {
	if !p.IsSetReq() {
		return PermissionServiceListPermissionTemplatesArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_PermissionServiceListPermissionTemplatesArgs = map[int16]string{
	1: "req",
}

func (p *PermissionServiceListPermissionTemplatesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PermissionServiceListPermissionTemplatesArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceListPermissionTemplatesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceListPermissionTemplatesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListPermissionTemplatesRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PermissionServiceListPermissionTemplatesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPermissionTemplates_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceListPermissionTemplatesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PermissionServiceListPermissionTemplatesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceListPermissionTemplatesArgs(%+v)", *p)

}

type PermissionServiceListPermissionTemplatesResult struct {
	Success *ListPermissionTemplatesResponse `thrift:"success,0,optional"`
}

func NewPermissionServiceListPermissionTemplatesResult() *PermissionServiceListPermissionTemplatesResult {
	return &PermissionServiceListPermissionTemplatesResult{}
}

func (p *PermissionServiceListPermissionTemplatesResult) InitDefault() {
}

var PermissionServiceListPermissionTemplatesResult_Success_DEFAULT *ListPermissionTemplatesResponse

func (p *PermissionServiceListPermissionTemplatesResult) GetSuccess() (v *ListPermissionTemplatesResponse) {
	if !p.IsSetSuccess() {
		return PermissionServiceListPermissionTemplatesResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_PermissionServiceListPermissionTemplatesResult = map[int16]string{
	0: "success",
}

func (p *PermissionServiceListPermissionTemplatesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PermissionServiceListPermissionTemplatesResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceListPermissionTemplatesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceListPermissionTemplatesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListPermissionTemplatesResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PermissionServiceListPermissionTemplatesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPermissionTemplates_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceListPermissionTemplatesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PermissionServiceListPermissionTemplatesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceListPermissionTemplatesResult(%+v)", *p)

}

type PermissionServiceListUsersArgs struct {
	Req *ListUsersRequest `thrift:"req,1"`
}

func NewPermissionServiceListUsersArgs() *PermissionServiceListUsersArgs {
	return &PermissionServiceListUsersArgs{}
}

func (p *PermissionServiceListUsersArgs) InitDefault() {
}

var PermissionServiceListUsersArgs_Req_DEFAULT *ListUsersRequest

func (p *PermissionServiceListUsersArgs) GetReq() (v *ListUsersRequest) {
	if !p.IsSetReq() {
		return PermissionServiceListUsersArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_PermissionServiceListUsersArgs = map[int16]string{
	1: "req",
}

func (p *PermissionServiceListUsersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PermissionServiceListUsersArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceListUsersArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceListUsersArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListUsersRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PermissionServiceListUsersArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListUsers_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceListUsersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PermissionServiceListUsersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceListUsersArgs(%+v)", *p)

}

type PermissionServiceListUsersResult struct {
	Success *ListUsersResponse `thrift:"success,0,optional"`
}

func NewPermissionServiceListUsersResult() *PermissionServiceListUsersResult {
	return &PermissionServiceListUsersResult{}
}

func (p *PermissionServiceListUsersResult) InitDefault() {
}

var PermissionServiceListUsersResult_Success_DEFAULT *ListUsersResponse

func (p *PermissionServiceListUsersResult) GetSuccess() (v *ListUsersResponse) {
	if !p.IsSetSuccess() {
		return PermissionServiceListUsersResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_PermissionServiceListUsersResult = map[int16]string{
	0: "success",
}

func (p *PermissionServiceListUsersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PermissionServiceListUsersResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceListUsersResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceListUsersResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListUsersResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PermissionServiceListUsersResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListUsers_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceListUsersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PermissionServiceListUsersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceListUsersResult(%+v)", *p)

}

type PermissionServiceUpdateUserStatusArgs struct {
	Req *UpdateUserStatusRequest `thrift:"req,1"`
}

func NewPermissionServiceUpdateUserStatusArgs() *PermissionServiceUpdateUserStatusArgs {
	return &PermissionServiceUpdateUserStatusArgs{}
}

func (p *PermissionServiceUpdateUserStatusArgs) InitDefault() {
}

var PermissionServiceUpdateUserStatusArgs_Req_DEFAULT *UpdateUserStatusRequest

func (p *PermissionServiceUpdateUserStatusArgs) GetReq() (v *UpdateUserStatusRequest) {
	if !p.IsSetReq() {
		return PermissionServiceUpdateUserStatusArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_PermissionServiceUpdateUserStatusArgs = map[int16]string{
	1: "req",
}

func (p *PermissionServiceUpdateUserStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PermissionServiceUpdateUserStatusArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceUpdateUserStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceUpdateUserStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateUserStatusRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PermissionServiceUpdateUserStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateUserStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceUpdateUserStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PermissionServiceUpdateUserStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceUpdateUserStatusArgs(%+v)", *p)

}

type PermissionServiceUpdateUserStatusResult struct {
	Success *UpdateUserStatusResponse `thrift:"success,0,optional"`
}

func NewPermissionServiceUpdateUserStatusResult() *PermissionServiceUpdateUserStatusResult {
	return &PermissionServiceUpdateUserStatusResult{}
}

func (p *PermissionServiceUpdateUserStatusResult) InitDefault() {
}

var PermissionServiceUpdateUserStatusResult_Success_DEFAULT *UpdateUserStatusResponse

func (p *PermissionServiceUpdateUserStatusResult) GetSuccess() (v *UpdateUserStatusResponse) {
	if !p.IsSetSuccess() {
		return PermissionServiceUpdateUserStatusResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_PermissionServiceUpdateUserStatusResult = map[int16]string{
	0: "success",
}

func (p *PermissionServiceUpdateUserStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PermissionServiceUpdateUserStatusResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceUpdateUserStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceUpdateUserStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateUserStatusResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PermissionServiceUpdateUserStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateUserStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceUpdateUserStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PermissionServiceUpdateUserStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceUpdateUserStatusResult(%+v)", *p)

}

type PermissionServiceAssignUserMultipleRolesArgs struct {
	Req *AssignUserMultipleRolesRequest `thrift:"req,1"`
}

func NewPermissionServiceAssignUserMultipleRolesArgs() *PermissionServiceAssignUserMultipleRolesArgs {
	return &PermissionServiceAssignUserMultipleRolesArgs{}
}

func (p *PermissionServiceAssignUserMultipleRolesArgs) InitDefault() {
}

var PermissionServiceAssignUserMultipleRolesArgs_Req_DEFAULT *AssignUserMultipleRolesRequest

func (p *PermissionServiceAssignUserMultipleRolesArgs) GetReq() (v *AssignUserMultipleRolesRequest) {
	if !p.IsSetReq() {
		return PermissionServiceAssignUserMultipleRolesArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_PermissionServiceAssignUserMultipleRolesArgs = map[int16]string{
	1: "req",
}

func (p *PermissionServiceAssignUserMultipleRolesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PermissionServiceAssignUserMultipleRolesArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceAssignUserMultipleRolesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceAssignUserMultipleRolesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewAssignUserMultipleRolesRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PermissionServiceAssignUserMultipleRolesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AssignUserMultipleRoles_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceAssignUserMultipleRolesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PermissionServiceAssignUserMultipleRolesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceAssignUserMultipleRolesArgs(%+v)", *p)

}

type PermissionServiceAssignUserMultipleRolesResult struct {
	Success *AssignUserMultipleRolesResponse `thrift:"success,0,optional"`
}

func NewPermissionServiceAssignUserMultipleRolesResult() *PermissionServiceAssignUserMultipleRolesResult {
	return &PermissionServiceAssignUserMultipleRolesResult{}
}

func (p *PermissionServiceAssignUserMultipleRolesResult) InitDefault() {
}

var PermissionServiceAssignUserMultipleRolesResult_Success_DEFAULT *AssignUserMultipleRolesResponse

func (p *PermissionServiceAssignUserMultipleRolesResult) GetSuccess() (v *AssignUserMultipleRolesResponse) {
	if !p.IsSetSuccess() {
		return PermissionServiceAssignUserMultipleRolesResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_PermissionServiceAssignUserMultipleRolesResult = map[int16]string{
	0: "success",
}

func (p *PermissionServiceAssignUserMultipleRolesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PermissionServiceAssignUserMultipleRolesResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceAssignUserMultipleRolesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceAssignUserMultipleRolesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewAssignUserMultipleRolesResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PermissionServiceAssignUserMultipleRolesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AssignUserMultipleRoles_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceAssignUserMultipleRolesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PermissionServiceAssignUserMultipleRolesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceAssignUserMultipleRolesResult(%+v)", *p)

}

type PermissionServiceUnassignUserRolesArgs struct {
	Req *UnassignUserRolesRequest `thrift:"req,1"`
}

func NewPermissionServiceUnassignUserRolesArgs() *PermissionServiceUnassignUserRolesArgs {
	return &PermissionServiceUnassignUserRolesArgs{}
}

func (p *PermissionServiceUnassignUserRolesArgs) InitDefault() {
}

var PermissionServiceUnassignUserRolesArgs_Req_DEFAULT *UnassignUserRolesRequest

func (p *PermissionServiceUnassignUserRolesArgs) GetReq() (v *UnassignUserRolesRequest) {
	if !p.IsSetReq() {
		return PermissionServiceUnassignUserRolesArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_PermissionServiceUnassignUserRolesArgs = map[int16]string{
	1: "req",
}

func (p *PermissionServiceUnassignUserRolesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PermissionServiceUnassignUserRolesArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceUnassignUserRolesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceUnassignUserRolesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUnassignUserRolesRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PermissionServiceUnassignUserRolesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UnassignUserRoles_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceUnassignUserRolesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PermissionServiceUnassignUserRolesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceUnassignUserRolesArgs(%+v)", *p)

}

type PermissionServiceUnassignUserRolesResult struct {
	Success *UnassignUserRolesResponse `thrift:"success,0,optional"`
}

func NewPermissionServiceUnassignUserRolesResult() *PermissionServiceUnassignUserRolesResult {
	return &PermissionServiceUnassignUserRolesResult{}
}

func (p *PermissionServiceUnassignUserRolesResult) InitDefault() {
}

var PermissionServiceUnassignUserRolesResult_Success_DEFAULT *UnassignUserRolesResponse

func (p *PermissionServiceUnassignUserRolesResult) GetSuccess() (v *UnassignUserRolesResponse) {
	if !p.IsSetSuccess() {
		return PermissionServiceUnassignUserRolesResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_PermissionServiceUnassignUserRolesResult = map[int16]string{
	0: "success",
}

func (p *PermissionServiceUnassignUserRolesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PermissionServiceUnassignUserRolesResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceUnassignUserRolesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceUnassignUserRolesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUnassignUserRolesResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PermissionServiceUnassignUserRolesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UnassignUserRoles_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceUnassignUserRolesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PermissionServiceUnassignUserRolesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceUnassignUserRolesResult(%+v)", *p)

}

type PermissionServiceGetUserRolesArgs struct {
	Req *GetUserRolesRequest `thrift:"req,1"`
}

func NewPermissionServiceGetUserRolesArgs() *PermissionServiceGetUserRolesArgs {
	return &PermissionServiceGetUserRolesArgs{}
}

func (p *PermissionServiceGetUserRolesArgs) InitDefault() {
}

var PermissionServiceGetUserRolesArgs_Req_DEFAULT *GetUserRolesRequest

func (p *PermissionServiceGetUserRolesArgs) GetReq() (v *GetUserRolesRequest) {
	if !p.IsSetReq() {
		return PermissionServiceGetUserRolesArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_PermissionServiceGetUserRolesArgs = map[int16]string{
	1: "req",
}

func (p *PermissionServiceGetUserRolesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PermissionServiceGetUserRolesArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceGetUserRolesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceGetUserRolesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetUserRolesRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PermissionServiceGetUserRolesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserRoles_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceGetUserRolesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PermissionServiceGetUserRolesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceGetUserRolesArgs(%+v)", *p)

}

type PermissionServiceGetUserRolesResult struct {
	Success *GetUserRolesResponse `thrift:"success,0,optional"`
}

func NewPermissionServiceGetUserRolesResult() *PermissionServiceGetUserRolesResult {
	return &PermissionServiceGetUserRolesResult{}
}

func (p *PermissionServiceGetUserRolesResult) InitDefault() {
}

var PermissionServiceGetUserRolesResult_Success_DEFAULT *GetUserRolesResponse

func (p *PermissionServiceGetUserRolesResult) GetSuccess() (v *GetUserRolesResponse) {
	if !p.IsSetSuccess() {
		return PermissionServiceGetUserRolesResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_PermissionServiceGetUserRolesResult = map[int16]string{
	0: "success",
}

func (p *PermissionServiceGetUserRolesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PermissionServiceGetUserRolesResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceGetUserRolesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceGetUserRolesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetUserRolesResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PermissionServiceGetUserRolesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserRoles_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceGetUserRolesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PermissionServiceGetUserRolesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceGetUserRolesResult(%+v)", *p)

}

type PermissionServiceResetUserPasswordArgs struct {
	Req *ResetUserPasswordRequest `thrift:"req,1"`
}

func NewPermissionServiceResetUserPasswordArgs() *PermissionServiceResetUserPasswordArgs {
	return &PermissionServiceResetUserPasswordArgs{}
}

func (p *PermissionServiceResetUserPasswordArgs) InitDefault() {
}

var PermissionServiceResetUserPasswordArgs_Req_DEFAULT *ResetUserPasswordRequest

func (p *PermissionServiceResetUserPasswordArgs) GetReq() (v *ResetUserPasswordRequest) {
	if !p.IsSetReq() {
		return PermissionServiceResetUserPasswordArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_PermissionServiceResetUserPasswordArgs = map[int16]string{
	1: "req",
}

func (p *PermissionServiceResetUserPasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PermissionServiceResetUserPasswordArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceResetUserPasswordArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceResetUserPasswordArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewResetUserPasswordRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PermissionServiceResetUserPasswordArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ResetUserPassword_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceResetUserPasswordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PermissionServiceResetUserPasswordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceResetUserPasswordArgs(%+v)", *p)

}

type PermissionServiceResetUserPasswordResult struct {
	Success *ResetUserPasswordResponse `thrift:"success,0,optional"`
}

func NewPermissionServiceResetUserPasswordResult() *PermissionServiceResetUserPasswordResult {
	return &PermissionServiceResetUserPasswordResult{}
}

func (p *PermissionServiceResetUserPasswordResult) InitDefault() {
}

var PermissionServiceResetUserPasswordResult_Success_DEFAULT *ResetUserPasswordResponse

func (p *PermissionServiceResetUserPasswordResult) GetSuccess() (v *ResetUserPasswordResponse) {
	if !p.IsSetSuccess() {
		return PermissionServiceResetUserPasswordResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_PermissionServiceResetUserPasswordResult = map[int16]string{
	0: "success",
}

func (p *PermissionServiceResetUserPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PermissionServiceResetUserPasswordResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PermissionServiceResetUserPasswordResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PermissionServiceResetUserPasswordResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewResetUserPasswordResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PermissionServiceResetUserPasswordResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ResetUserPassword_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PermissionServiceResetUserPasswordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PermissionServiceResetUserPasswordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PermissionServiceResetUserPasswordResult(%+v)", *p)

}
