/*
 * Copyright 2025 coze-plus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by hertz generator.

package coze

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	permission1 "github.com/coze-dev/coze-studio/backend/api/model/permission/permission"
	application "github.com/coze-dev/coze-studio/backend/application/permission"
)

// CreateRole .
// @router /api/permission_api/role/create [POST]
func CreateRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req permission1.CreateRoleRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := application.PermissionSVC.CreateRole(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// UpdateRole .
// @router /api/permission_api/role/update [POST]
func UpdateRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req permission1.UpdateRoleRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := application.PermissionSVC.UpdateRole(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// DeleteRole .
// @router /api/permission_api/role/delete [POST]
func DeleteRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req permission1.DeleteRoleRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := application.PermissionSVC.DeleteRole(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetRole .
// @router /api/permission_api/role/get [GET]
func GetRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req permission1.GetRoleRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := application.PermissionSVC.GetRole(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// ListRoles .
// @router /api/permission_api/role/list [POST]
func ListRoles(ctx context.Context, c *app.RequestContext) {
	var err error
	var req permission1.ListRolesRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := application.PermissionSVC.ListRoles(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// ListPermissionTemplates .
// @router /api/permission_api/template/list [POST]
func ListPermissionTemplates(ctx context.Context, c *app.RequestContext) {
	var err error
	var req permission1.ListPermissionTemplatesRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := application.PermissionSVC.ListPermissionTemplates(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// ListUsers .
// @router /api/permission_api/user/list [POST]
func ListUsers(ctx context.Context, c *app.RequestContext) {
	var err error
	var req permission1.ListUsersRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := application.PermissionSVC.ListUsers(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// UpdateUserStatus .
// @router /api/permission_api/user/status/update [POST]
func UpdateUserStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req permission1.UpdateUserStatusRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := application.PermissionSVC.UpdateUserStatus(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}
	c.JSON(consts.StatusOK, resp)
}
