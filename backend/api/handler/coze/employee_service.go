/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by hertz generator.

package coze

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	employee1 "github.com/coze-dev/coze-studio/backend/api/model/corporation/employee"
	"github.com/coze-dev/coze-studio/backend/application/corporation"
)

// CreateEmployee .
// @router /v1/corporation/employee/create [POST]
func CreateEmployee(ctx context.Context, c *app.RequestContext) {
	var err error
	var req employee1.CreateEmployeeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := corporation.CorporationSVC.CreateEmployee(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetEmployee .
// @router /v1/corporation/employee/:id [GET]
func GetEmployee(ctx context.Context, c *app.RequestContext) {
	var err error
	var req employee1.GetEmployeeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := corporation.CorporationSVC.GetEmployeeByID(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateEmployee .
// @router /v1/corporation/employee/:id [PUT]
func UpdateEmployee(ctx context.Context, c *app.RequestContext) {
	var err error
	var req employee1.UpdateEmployeeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := corporation.CorporationSVC.UpdateEmployee(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// DeleteEmployee .
// @router /v1/corporation/employee/:id [DELETE]
func DeleteEmployee(ctx context.Context, c *app.RequestContext) {
	var err error
	var req employee1.DeleteEmployeeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := corporation.CorporationSVC.DeleteEmployee(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// ListEmployees .
// @router /v1/corporation/employee/list [POST]
func ListEmployees(ctx context.Context, c *app.RequestContext) {
	var err error
	var req employee1.ListEmployeeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := corporation.CorporationSVC.ListEmployees(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// AssignEmployeeToDepartment .
// @router /v1/corporation/employee/assign-department [POST]
func AssignEmployeeToDepartment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req employee1.AssignEmployeeToDepartmentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := corporation.CorporationSVC.AssignEmployeeToDepartment(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateEmployeeDepartment .
// @router /v1/corporation/employee/department/:id [PUT]
func UpdateEmployeeDepartment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req employee1.UpdateEmployeeDepartmentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := corporation.CorporationSVC.UpdateEmployeeDepartment(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// RemoveEmployeeFromDepartment .
// @router /v1/corporation/employee/department/:id [DELETE]
func RemoveEmployeeFromDepartment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req employee1.RemoveEmployeeFromDepartmentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := corporation.CorporationSVC.RemoveEmployeeFromDepartment(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}
