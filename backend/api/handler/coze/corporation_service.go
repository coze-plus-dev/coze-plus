/*
 * Copyright 2025 coze-plus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by hertz generator.

package coze

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	corporation1 "github.com/coze-dev/coze-studio/backend/api/model/corporation/corporation"
	"github.com/coze-dev/coze-studio/backend/application/corporation"
)

// CreateCorporation .
// @router /v1/corporation/create [POST]
func CreateCorporation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req corporation1.CreateCorpRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	resp, err := corporation.CorporationSVC.CreateCorporation(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetCorporation .
// @router /v1/corporation/:id [GET]
func GetCorporation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req corporation1.GetCorpRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	resp, err := corporation.CorporationSVC.GetCorporationByID(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateCorporation .
// @router /v1/corporation/:id [PUT]
func UpdateCorporation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req corporation1.UpdateCorpRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	resp, err := corporation.CorporationSVC.UpdateCorporation(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// DeleteCorporation .
// @router /v1/corporation/:id [DELETE]
func DeleteCorporation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req corporation1.DeleteCorpRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	resp, err := corporation.CorporationSVC.DeleteCorporation(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// ListCorporations .
// @router /v1/corporation/list [POST]
func ListCorporations(ctx context.Context, c *app.RequestContext) {
	var err error
	var req corporation1.ListCorpsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	resp, err := corporation.CorporationSVC.ListCorporations(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetOrganizationTree .
// @router /api/v1/organization/tree [POST]
func GetOrganizationTree(ctx context.Context, c *app.RequestContext) {
	var err error
	var req corporation1.GetOrganizationTreeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	resp, err := corporation.CorporationSVC.GetOrganizationTree(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}
