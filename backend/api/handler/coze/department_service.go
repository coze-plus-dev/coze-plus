/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by hertz generator.

package coze

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	department1 "github.com/coze-dev/coze-studio/backend/api/model/corporation/department"
	"github.com/coze-dev/coze-studio/backend/application/corporation"
)

// CreateDepartment .
// @router /v1/corporation/department/create [POST]
func CreateDepartment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req department1.CreateDepartmentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := corporation.CorporationSVC.CreateDepartment(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetDepartment .
// @router /v1/corporation/department/:id [GET]
func GetDepartment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req department1.GetDepartmentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := corporation.CorporationSVC.GetDepartmentByID(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateDepartment .
// @router /v1/corporation/department/:id [PUT]
func UpdateDepartment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req department1.UpdateDepartmentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := corporation.CorporationSVC.UpdateDepartment(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// DeleteDepartment .
// @router /v1/corporation/department/:id [DELETE]
func DeleteDepartment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req department1.DeleteDepartmentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := corporation.CorporationSVC.DeleteDepartment(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// ListDepartments .
// @router /v1/corporation/department/list [POST]
func ListDepartments(ctx context.Context, c *app.RequestContext) {
	var err error
	var req department1.ListDepartmentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := corporation.CorporationSVC.ListDepartments(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// SortDepartments .
// @router /v1/corporation/department/sort [POST]
func SortDepartments(ctx context.Context, c *app.RequestContext) {
	var err error
	var req department1.SortDepartmentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := corporation.CorporationSVC.SortDepartments(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}