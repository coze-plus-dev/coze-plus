/*
 * Copyright 2025 coze-plus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-studio/backend/domain/corporation/internal/dal/model"
)

func newCorporationEmployee(db *gorm.DB, opts ...gen.DOOption) corporationEmployee {
	_corporationEmployee := corporationEmployee{}

	_corporationEmployee.corporationEmployeeDo.UseDB(db, opts...)
	_corporationEmployee.corporationEmployeeDo.UseModel(&model.CorporationEmployee{})

	tableName := _corporationEmployee.corporationEmployeeDo.TableName()
	_corporationEmployee.ALL = field.NewAsterisk(tableName)
	_corporationEmployee.ID = field.NewInt64(tableName, "id")
	_corporationEmployee.EmployeeNo = field.NewString(tableName, "employee_no")
	_corporationEmployee.Name = field.NewString(tableName, "name")
	_corporationEmployee.EnName = field.NewString(tableName, "en_name")
	_corporationEmployee.Nickname = field.NewString(tableName, "nickname")
	_corporationEmployee.Avatar = field.NewString(tableName, "avatar")
	_corporationEmployee.Email = field.NewString(tableName, "email")
	_corporationEmployee.Mobile = field.NewString(tableName, "mobile")
	_corporationEmployee.UserID = field.NewInt64(tableName, "user_id")
	_corporationEmployee.Status = field.NewInt32(tableName, "status")
	_corporationEmployee.OutEmployeeID = field.NewString(tableName, "out_employee_id")
	_corporationEmployee.EmployeeSource = field.NewInt32(tableName, "employee_source")
	_corporationEmployee.CreatorID = field.NewInt64(tableName, "creator_id")
	_corporationEmployee.CreatedAt = field.NewInt64(tableName, "created_at")
	_corporationEmployee.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_corporationEmployee.DeletedAt = field.NewField(tableName, "deleted_at")

	_corporationEmployee.fillFieldMap()

	return _corporationEmployee
}

// corporationEmployee Employee Info Table
type corporationEmployee struct {
	corporationEmployeeDo

	ALL            field.Asterisk
	ID             field.Int64  // Employee ID
	EmployeeNo     field.String // Employee Number (globally unique)
	Name           field.String // Employee Name
	EnName         field.String // English Name
	Nickname       field.String // Nickname
	Avatar         field.String // Avatar URL
	Email          field.String // Email Address
	Mobile         field.String // Mobile Phone
	UserID         field.Int64  // Associated User ID (NULL if no user account)
	Status         field.Int32  // Employee Status: 1-Active, 2-Resigned
	OutEmployeeID  field.String // External Employee ID
	EmployeeSource field.Int32  // Data Source: 1-Enterprise WeChat,2-DingTalk,3-Feishu,4-Manual
	CreatorID      field.Int64  // Creator ID
	CreatedAt      field.Int64  // Create Time in Milliseconds
	UpdatedAt      field.Int64  // Update Time in Milliseconds
	DeletedAt      field.Field  // Deletion timestamp

	fieldMap map[string]field.Expr
}

func (c corporationEmployee) Table(newTableName string) *corporationEmployee {
	c.corporationEmployeeDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c corporationEmployee) As(alias string) *corporationEmployee {
	c.corporationEmployeeDo.DO = *(c.corporationEmployeeDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *corporationEmployee) updateTableName(table string) *corporationEmployee {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.EmployeeNo = field.NewString(table, "employee_no")
	c.Name = field.NewString(table, "name")
	c.EnName = field.NewString(table, "en_name")
	c.Nickname = field.NewString(table, "nickname")
	c.Avatar = field.NewString(table, "avatar")
	c.Email = field.NewString(table, "email")
	c.Mobile = field.NewString(table, "mobile")
	c.UserID = field.NewInt64(table, "user_id")
	c.Status = field.NewInt32(table, "status")
	c.OutEmployeeID = field.NewString(table, "out_employee_id")
	c.EmployeeSource = field.NewInt32(table, "employee_source")
	c.CreatorID = field.NewInt64(table, "creator_id")
	c.CreatedAt = field.NewInt64(table, "created_at")
	c.UpdatedAt = field.NewInt64(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *corporationEmployee) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *corporationEmployee) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 16)
	c.fieldMap["id"] = c.ID
	c.fieldMap["employee_no"] = c.EmployeeNo
	c.fieldMap["name"] = c.Name
	c.fieldMap["en_name"] = c.EnName
	c.fieldMap["nickname"] = c.Nickname
	c.fieldMap["avatar"] = c.Avatar
	c.fieldMap["email"] = c.Email
	c.fieldMap["mobile"] = c.Mobile
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["status"] = c.Status
	c.fieldMap["out_employee_id"] = c.OutEmployeeID
	c.fieldMap["employee_source"] = c.EmployeeSource
	c.fieldMap["creator_id"] = c.CreatorID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c corporationEmployee) clone(db *gorm.DB) corporationEmployee {
	c.corporationEmployeeDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c corporationEmployee) replaceDB(db *gorm.DB) corporationEmployee {
	c.corporationEmployeeDo.ReplaceDB(db)
	return c
}

type corporationEmployeeDo struct{ gen.DO }

type ICorporationEmployeeDo interface {
	gen.SubQuery
	Debug() ICorporationEmployeeDo
	WithContext(ctx context.Context) ICorporationEmployeeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICorporationEmployeeDo
	WriteDB() ICorporationEmployeeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICorporationEmployeeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICorporationEmployeeDo
	Not(conds ...gen.Condition) ICorporationEmployeeDo
	Or(conds ...gen.Condition) ICorporationEmployeeDo
	Select(conds ...field.Expr) ICorporationEmployeeDo
	Where(conds ...gen.Condition) ICorporationEmployeeDo
	Order(conds ...field.Expr) ICorporationEmployeeDo
	Distinct(cols ...field.Expr) ICorporationEmployeeDo
	Omit(cols ...field.Expr) ICorporationEmployeeDo
	Join(table schema.Tabler, on ...field.Expr) ICorporationEmployeeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICorporationEmployeeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICorporationEmployeeDo
	Group(cols ...field.Expr) ICorporationEmployeeDo
	Having(conds ...gen.Condition) ICorporationEmployeeDo
	Limit(limit int) ICorporationEmployeeDo
	Offset(offset int) ICorporationEmployeeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICorporationEmployeeDo
	Unscoped() ICorporationEmployeeDo
	Create(values ...*model.CorporationEmployee) error
	CreateInBatches(values []*model.CorporationEmployee, batchSize int) error
	Save(values ...*model.CorporationEmployee) error
	First() (*model.CorporationEmployee, error)
	Take() (*model.CorporationEmployee, error)
	Last() (*model.CorporationEmployee, error)
	Find() ([]*model.CorporationEmployee, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CorporationEmployee, err error)
	FindInBatches(result *[]*model.CorporationEmployee, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CorporationEmployee) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICorporationEmployeeDo
	Assign(attrs ...field.AssignExpr) ICorporationEmployeeDo
	Joins(fields ...field.RelationField) ICorporationEmployeeDo
	Preload(fields ...field.RelationField) ICorporationEmployeeDo
	FirstOrInit() (*model.CorporationEmployee, error)
	FirstOrCreate() (*model.CorporationEmployee, error)
	FindByPage(offset int, limit int) (result []*model.CorporationEmployee, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICorporationEmployeeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c corporationEmployeeDo) Debug() ICorporationEmployeeDo {
	return c.withDO(c.DO.Debug())
}

func (c corporationEmployeeDo) WithContext(ctx context.Context) ICorporationEmployeeDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c corporationEmployeeDo) ReadDB() ICorporationEmployeeDo {
	return c.Clauses(dbresolver.Read)
}

func (c corporationEmployeeDo) WriteDB() ICorporationEmployeeDo {
	return c.Clauses(dbresolver.Write)
}

func (c corporationEmployeeDo) Session(config *gorm.Session) ICorporationEmployeeDo {
	return c.withDO(c.DO.Session(config))
}

func (c corporationEmployeeDo) Clauses(conds ...clause.Expression) ICorporationEmployeeDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c corporationEmployeeDo) Returning(value interface{}, columns ...string) ICorporationEmployeeDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c corporationEmployeeDo) Not(conds ...gen.Condition) ICorporationEmployeeDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c corporationEmployeeDo) Or(conds ...gen.Condition) ICorporationEmployeeDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c corporationEmployeeDo) Select(conds ...field.Expr) ICorporationEmployeeDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c corporationEmployeeDo) Where(conds ...gen.Condition) ICorporationEmployeeDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c corporationEmployeeDo) Order(conds ...field.Expr) ICorporationEmployeeDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c corporationEmployeeDo) Distinct(cols ...field.Expr) ICorporationEmployeeDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c corporationEmployeeDo) Omit(cols ...field.Expr) ICorporationEmployeeDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c corporationEmployeeDo) Join(table schema.Tabler, on ...field.Expr) ICorporationEmployeeDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c corporationEmployeeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICorporationEmployeeDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c corporationEmployeeDo) RightJoin(table schema.Tabler, on ...field.Expr) ICorporationEmployeeDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c corporationEmployeeDo) Group(cols ...field.Expr) ICorporationEmployeeDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c corporationEmployeeDo) Having(conds ...gen.Condition) ICorporationEmployeeDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c corporationEmployeeDo) Limit(limit int) ICorporationEmployeeDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c corporationEmployeeDo) Offset(offset int) ICorporationEmployeeDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c corporationEmployeeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICorporationEmployeeDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c corporationEmployeeDo) Unscoped() ICorporationEmployeeDo {
	return c.withDO(c.DO.Unscoped())
}

func (c corporationEmployeeDo) Create(values ...*model.CorporationEmployee) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c corporationEmployeeDo) CreateInBatches(values []*model.CorporationEmployee, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c corporationEmployeeDo) Save(values ...*model.CorporationEmployee) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c corporationEmployeeDo) First() (*model.CorporationEmployee, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CorporationEmployee), nil
	}
}

func (c corporationEmployeeDo) Take() (*model.CorporationEmployee, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CorporationEmployee), nil
	}
}

func (c corporationEmployeeDo) Last() (*model.CorporationEmployee, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CorporationEmployee), nil
	}
}

func (c corporationEmployeeDo) Find() ([]*model.CorporationEmployee, error) {
	result, err := c.DO.Find()
	return result.([]*model.CorporationEmployee), err
}

func (c corporationEmployeeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CorporationEmployee, err error) {
	buf := make([]*model.CorporationEmployee, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c corporationEmployeeDo) FindInBatches(result *[]*model.CorporationEmployee, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c corporationEmployeeDo) Attrs(attrs ...field.AssignExpr) ICorporationEmployeeDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c corporationEmployeeDo) Assign(attrs ...field.AssignExpr) ICorporationEmployeeDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c corporationEmployeeDo) Joins(fields ...field.RelationField) ICorporationEmployeeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c corporationEmployeeDo) Preload(fields ...field.RelationField) ICorporationEmployeeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c corporationEmployeeDo) FirstOrInit() (*model.CorporationEmployee, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CorporationEmployee), nil
	}
}

func (c corporationEmployeeDo) FirstOrCreate() (*model.CorporationEmployee, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CorporationEmployee), nil
	}
}

func (c corporationEmployeeDo) FindByPage(offset int, limit int) (result []*model.CorporationEmployee, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c corporationEmployeeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c corporationEmployeeDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c corporationEmployeeDo) Delete(models ...*model.CorporationEmployee) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *corporationEmployeeDo) withDO(do gen.Dao) *corporationEmployeeDo {
	c.DO = *do.(*gen.DO)
	return c
}
