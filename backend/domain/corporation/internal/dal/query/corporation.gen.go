/*
 * Copyright 2025 coze-plus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-studio/backend/domain/corporation/internal/dal/model"
)

func newCorporation(db *gorm.DB, opts ...gen.DOOption) corporation {
	_corporation := corporation{}

	_corporation.corporationDo.UseDB(db, opts...)
	_corporation.corporationDo.UseModel(&model.Corporation{})

	tableName := _corporation.corporationDo.TableName()
	_corporation.ALL = field.NewAsterisk(tableName)
	_corporation.ID = field.NewInt64(tableName, "id")
	_corporation.ParentID = field.NewInt64(tableName, "parent_id")
	_corporation.Name = field.NewString(tableName, "name")
	_corporation.CorpType = field.NewString(tableName, "corp_type")
	_corporation.Sort = field.NewInt32(tableName, "sort")
	_corporation.OutCorpID = field.NewString(tableName, "out_corp_id")
	_corporation.CorpSource = field.NewInt32(tableName, "corp_source")
	_corporation.CreatorID = field.NewInt64(tableName, "creator_id")
	_corporation.CreatedAt = field.NewInt64(tableName, "created_at")
	_corporation.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_corporation.DeletedAt = field.NewField(tableName, "deleted_at")

	_corporation.fillFieldMap()

	return _corporation
}

// corporation Corporation Info Table
type corporation struct {
	corporationDo

	ALL        field.Asterisk
	ID         field.Int64  // Corporation ID
	ParentID   field.Int64  // Parent Corporation ID (NULL for root corporation)
	Name       field.String // Corporation Name
	CorpType   field.String // Corporation Type: group,company,branch
	Sort       field.Int32  // Sort Order
	OutCorpID  field.String // External Corporation ID
	CorpSource field.Int32  // Data Source: 1-Enterprise WeChat,2-DingTalk,3-Feishu,4-Manual
	CreatorID  field.Int64  // Creator ID
	CreatedAt  field.Int64  // Create Time in Milliseconds
	UpdatedAt  field.Int64  // Update Time in Milliseconds
	DeletedAt  field.Field  // Deletion timestamp

	fieldMap map[string]field.Expr
}

func (c corporation) Table(newTableName string) *corporation {
	c.corporationDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c corporation) As(alias string) *corporation {
	c.corporationDo.DO = *(c.corporationDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *corporation) updateTableName(table string) *corporation {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.ParentID = field.NewInt64(table, "parent_id")
	c.Name = field.NewString(table, "name")
	c.CorpType = field.NewString(table, "corp_type")
	c.Sort = field.NewInt32(table, "sort")
	c.OutCorpID = field.NewString(table, "out_corp_id")
	c.CorpSource = field.NewInt32(table, "corp_source")
	c.CreatorID = field.NewInt64(table, "creator_id")
	c.CreatedAt = field.NewInt64(table, "created_at")
	c.UpdatedAt = field.NewInt64(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *corporation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *corporation) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 11)
	c.fieldMap["id"] = c.ID
	c.fieldMap["parent_id"] = c.ParentID
	c.fieldMap["name"] = c.Name
	c.fieldMap["corp_type"] = c.CorpType
	c.fieldMap["sort"] = c.Sort
	c.fieldMap["out_corp_id"] = c.OutCorpID
	c.fieldMap["corp_source"] = c.CorpSource
	c.fieldMap["creator_id"] = c.CreatorID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c corporation) clone(db *gorm.DB) corporation {
	c.corporationDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c corporation) replaceDB(db *gorm.DB) corporation {
	c.corporationDo.ReplaceDB(db)
	return c
}

type corporationDo struct{ gen.DO }

type ICorporationDo interface {
	gen.SubQuery
	Debug() ICorporationDo
	WithContext(ctx context.Context) ICorporationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICorporationDo
	WriteDB() ICorporationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICorporationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICorporationDo
	Not(conds ...gen.Condition) ICorporationDo
	Or(conds ...gen.Condition) ICorporationDo
	Select(conds ...field.Expr) ICorporationDo
	Where(conds ...gen.Condition) ICorporationDo
	Order(conds ...field.Expr) ICorporationDo
	Distinct(cols ...field.Expr) ICorporationDo
	Omit(cols ...field.Expr) ICorporationDo
	Join(table schema.Tabler, on ...field.Expr) ICorporationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICorporationDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICorporationDo
	Group(cols ...field.Expr) ICorporationDo
	Having(conds ...gen.Condition) ICorporationDo
	Limit(limit int) ICorporationDo
	Offset(offset int) ICorporationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICorporationDo
	Unscoped() ICorporationDo
	Create(values ...*model.Corporation) error
	CreateInBatches(values []*model.Corporation, batchSize int) error
	Save(values ...*model.Corporation) error
	First() (*model.Corporation, error)
	Take() (*model.Corporation, error)
	Last() (*model.Corporation, error)
	Find() ([]*model.Corporation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Corporation, err error)
	FindInBatches(result *[]*model.Corporation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Corporation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICorporationDo
	Assign(attrs ...field.AssignExpr) ICorporationDo
	Joins(fields ...field.RelationField) ICorporationDo
	Preload(fields ...field.RelationField) ICorporationDo
	FirstOrInit() (*model.Corporation, error)
	FirstOrCreate() (*model.Corporation, error)
	FindByPage(offset int, limit int) (result []*model.Corporation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICorporationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c corporationDo) Debug() ICorporationDo {
	return c.withDO(c.DO.Debug())
}

func (c corporationDo) WithContext(ctx context.Context) ICorporationDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c corporationDo) ReadDB() ICorporationDo {
	return c.Clauses(dbresolver.Read)
}

func (c corporationDo) WriteDB() ICorporationDo {
	return c.Clauses(dbresolver.Write)
}

func (c corporationDo) Session(config *gorm.Session) ICorporationDo {
	return c.withDO(c.DO.Session(config))
}

func (c corporationDo) Clauses(conds ...clause.Expression) ICorporationDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c corporationDo) Returning(value interface{}, columns ...string) ICorporationDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c corporationDo) Not(conds ...gen.Condition) ICorporationDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c corporationDo) Or(conds ...gen.Condition) ICorporationDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c corporationDo) Select(conds ...field.Expr) ICorporationDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c corporationDo) Where(conds ...gen.Condition) ICorporationDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c corporationDo) Order(conds ...field.Expr) ICorporationDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c corporationDo) Distinct(cols ...field.Expr) ICorporationDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c corporationDo) Omit(cols ...field.Expr) ICorporationDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c corporationDo) Join(table schema.Tabler, on ...field.Expr) ICorporationDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c corporationDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICorporationDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c corporationDo) RightJoin(table schema.Tabler, on ...field.Expr) ICorporationDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c corporationDo) Group(cols ...field.Expr) ICorporationDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c corporationDo) Having(conds ...gen.Condition) ICorporationDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c corporationDo) Limit(limit int) ICorporationDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c corporationDo) Offset(offset int) ICorporationDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c corporationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICorporationDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c corporationDo) Unscoped() ICorporationDo {
	return c.withDO(c.DO.Unscoped())
}

func (c corporationDo) Create(values ...*model.Corporation) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c corporationDo) CreateInBatches(values []*model.Corporation, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c corporationDo) Save(values ...*model.Corporation) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c corporationDo) First() (*model.Corporation, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Corporation), nil
	}
}

func (c corporationDo) Take() (*model.Corporation, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Corporation), nil
	}
}

func (c corporationDo) Last() (*model.Corporation, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Corporation), nil
	}
}

func (c corporationDo) Find() ([]*model.Corporation, error) {
	result, err := c.DO.Find()
	return result.([]*model.Corporation), err
}

func (c corporationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Corporation, err error) {
	buf := make([]*model.Corporation, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c corporationDo) FindInBatches(result *[]*model.Corporation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c corporationDo) Attrs(attrs ...field.AssignExpr) ICorporationDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c corporationDo) Assign(attrs ...field.AssignExpr) ICorporationDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c corporationDo) Joins(fields ...field.RelationField) ICorporationDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c corporationDo) Preload(fields ...field.RelationField) ICorporationDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c corporationDo) FirstOrInit() (*model.Corporation, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Corporation), nil
	}
}

func (c corporationDo) FirstOrCreate() (*model.Corporation, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Corporation), nil
	}
}

func (c corporationDo) FindByPage(offset int, limit int) (result []*model.Corporation, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c corporationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c corporationDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c corporationDo) Delete(models ...*model.Corporation) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *corporationDo) withDO(do gen.Dao) *corporationDo {
	c.DO = *do.(*gen.DO)
	return c
}
