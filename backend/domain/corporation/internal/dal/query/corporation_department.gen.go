// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-studio/backend/domain/corporation/internal/dal/model"
)

func newCorporationDepartment(db *gorm.DB, opts ...gen.DOOption) corporationDepartment {
	_corporationDepartment := corporationDepartment{}

	_corporationDepartment.corporationDepartmentDo.UseDB(db, opts...)
	_corporationDepartment.corporationDepartmentDo.UseModel(&model.CorporationDepartment{})

	tableName := _corporationDepartment.corporationDepartmentDo.TableName()
	_corporationDepartment.ALL = field.NewAsterisk(tableName)
	_corporationDepartment.ID = field.NewInt64(tableName, "id")
	_corporationDepartment.CorpID = field.NewInt64(tableName, "corp_id")
	_corporationDepartment.ParentID = field.NewInt64(tableName, "parent_id")
	_corporationDepartment.Name = field.NewString(tableName, "name")
	_corporationDepartment.Code = field.NewString(tableName, "code")
	_corporationDepartment.Level = field.NewInt32(tableName, "level")
	_corporationDepartment.FullPath = field.NewString(tableName, "full_path")
	_corporationDepartment.LeaderID = field.NewInt64(tableName, "leader_id")
	_corporationDepartment.Sort = field.NewInt32(tableName, "sort")
	_corporationDepartment.Status = field.NewInt32(tableName, "status")
	_corporationDepartment.OutDepartmentID = field.NewString(tableName, "out_department_id")
	_corporationDepartment.DepartmentSource = field.NewInt32(tableName, "department_source")
	_corporationDepartment.CreatorID = field.NewInt64(tableName, "creator_id")
	_corporationDepartment.CreatedAt = field.NewInt64(tableName, "created_at")
	_corporationDepartment.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_corporationDepartment.DeletedAt = field.NewInt64(tableName, "deleted_at")

	_corporationDepartment.fillFieldMap()

	return _corporationDepartment
}

// corporationDepartment Department Info Table
type corporationDepartment struct {
	corporationDepartmentDo corporationDepartmentDo

	ALL              field.Asterisk
	ID               field.Int64  // Department ID
	CorpID           field.Int64  // Corporation ID
	ParentID         field.Int64  // Parent Department ID (NULL for root department)
	Name             field.String // Department Name
	Code             field.String // Department Code
	Level            field.Int32  // Department Level
	FullPath         field.String // Department Full Path
	LeaderID         field.Int64  // Department Leader ID
	Sort             field.Int32  // Sort Order
	Status           field.Int32  // Status: 1-Active, 2-Inactive
	OutDepartmentID  field.String // External Department ID
	DepartmentSource field.Int32  // Data Source: 1-Enterprise WeChat,2-DingTalk,3-Feishu,4-Manual
	CreatorID        field.Int64  // Creator ID
	CreatedAt        field.Int64  // Create Time in Milliseconds
	UpdatedAt        field.Int64  // Update Time in Milliseconds
	DeletedAt        field.Int64  // Delete Time in Milliseconds

	fieldMap map[string]field.Expr
}

func (c corporationDepartment) Table(newTableName string) *corporationDepartment {
	c.corporationDepartmentDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c corporationDepartment) As(alias string) *corporationDepartment {
	c.corporationDepartmentDo.DO = *(c.corporationDepartmentDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *corporationDepartment) updateTableName(table string) *corporationDepartment {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CorpID = field.NewInt64(table, "corp_id")
	c.ParentID = field.NewInt64(table, "parent_id")
	c.Name = field.NewString(table, "name")
	c.Code = field.NewString(table, "code")
	c.Level = field.NewInt32(table, "level")
	c.FullPath = field.NewString(table, "full_path")
	c.LeaderID = field.NewInt64(table, "leader_id")
	c.Sort = field.NewInt32(table, "sort")
	c.Status = field.NewInt32(table, "status")
	c.OutDepartmentID = field.NewString(table, "out_department_id")
	c.DepartmentSource = field.NewInt32(table, "department_source")
	c.CreatorID = field.NewInt64(table, "creator_id")
	c.CreatedAt = field.NewInt64(table, "created_at")
	c.UpdatedAt = field.NewInt64(table, "updated_at")
	c.DeletedAt = field.NewInt64(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *corporationDepartment) WithContext(ctx context.Context) *corporationDepartmentDo {
	return c.corporationDepartmentDo.WithContext(ctx)
}

func (c corporationDepartment) TableName() string { return c.corporationDepartmentDo.TableName() }

func (c corporationDepartment) Alias() string { return c.corporationDepartmentDo.Alias() }

func (c corporationDepartment) Columns(cols ...field.Expr) gen.Columns {
	return c.corporationDepartmentDo.Columns(cols...)
}

func (c *corporationDepartment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *corporationDepartment) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 16)
	c.fieldMap["id"] = c.ID
	c.fieldMap["corp_id"] = c.CorpID
	c.fieldMap["parent_id"] = c.ParentID
	c.fieldMap["name"] = c.Name
	c.fieldMap["code"] = c.Code
	c.fieldMap["level"] = c.Level
	c.fieldMap["full_path"] = c.FullPath
	c.fieldMap["leader_id"] = c.LeaderID
	c.fieldMap["sort"] = c.Sort
	c.fieldMap["status"] = c.Status
	c.fieldMap["out_department_id"] = c.OutDepartmentID
	c.fieldMap["department_source"] = c.DepartmentSource
	c.fieldMap["creator_id"] = c.CreatorID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c corporationDepartment) clone(db *gorm.DB) corporationDepartment {
	c.corporationDepartmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c corporationDepartment) replaceDB(db *gorm.DB) corporationDepartment {
	c.corporationDepartmentDo.ReplaceDB(db)
	return c
}

type corporationDepartmentDo struct{ gen.DO }

func (c corporationDepartmentDo) Debug() *corporationDepartmentDo {
	return c.withDO(c.DO.Debug())
}

func (c corporationDepartmentDo) WithContext(ctx context.Context) *corporationDepartmentDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c corporationDepartmentDo) ReadDB() *corporationDepartmentDo {
	return c.Clauses(dbresolver.Read)
}

func (c corporationDepartmentDo) WriteDB() *corporationDepartmentDo {
	return c.Clauses(dbresolver.Write)
}

func (c corporationDepartmentDo) Session(config *gorm.Session) *corporationDepartmentDo {
	return c.withDO(c.DO.Session(config))
}

func (c corporationDepartmentDo) Clauses(conds ...clause.Expression) *corporationDepartmentDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c corporationDepartmentDo) Returning(value interface{}, columns ...string) *corporationDepartmentDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c corporationDepartmentDo) Not(conds ...gen.Condition) *corporationDepartmentDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c corporationDepartmentDo) Or(conds ...gen.Condition) *corporationDepartmentDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c corporationDepartmentDo) Select(conds ...field.Expr) *corporationDepartmentDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c corporationDepartmentDo) Where(conds ...gen.Condition) *corporationDepartmentDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c corporationDepartmentDo) Order(conds ...field.Expr) *corporationDepartmentDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c corporationDepartmentDo) Distinct(cols ...field.Expr) *corporationDepartmentDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c corporationDepartmentDo) Omit(cols ...field.Expr) *corporationDepartmentDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c corporationDepartmentDo) Join(table schema.Tabler, on ...field.Expr) *corporationDepartmentDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c corporationDepartmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *corporationDepartmentDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c corporationDepartmentDo) RightJoin(table schema.Tabler, on ...field.Expr) *corporationDepartmentDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c corporationDepartmentDo) Group(cols ...field.Expr) *corporationDepartmentDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c corporationDepartmentDo) Having(conds ...gen.Condition) *corporationDepartmentDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c corporationDepartmentDo) Limit(limit int) *corporationDepartmentDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c corporationDepartmentDo) Offset(offset int) *corporationDepartmentDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c corporationDepartmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *corporationDepartmentDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c corporationDepartmentDo) Unscoped() *corporationDepartmentDo {
	return c.withDO(c.DO.Unscoped())
}

func (c corporationDepartmentDo) Create(values ...*model.CorporationDepartment) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c corporationDepartmentDo) CreateInBatches(values []*model.CorporationDepartment, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c corporationDepartmentDo) Save(values ...*model.CorporationDepartment) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c corporationDepartmentDo) First() (*model.CorporationDepartment, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CorporationDepartment), nil
	}
}

func (c corporationDepartmentDo) Take() (*model.CorporationDepartment, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CorporationDepartment), nil
	}
}

func (c corporationDepartmentDo) Last() (*model.CorporationDepartment, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CorporationDepartment), nil
	}
}

func (c corporationDepartmentDo) Find() ([]*model.CorporationDepartment, error) {
	result, err := c.DO.Find()
	return result.([]*model.CorporationDepartment), err
}

func (c corporationDepartmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CorporationDepartment, err error) {
	buf := make([]*model.CorporationDepartment, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c corporationDepartmentDo) FindInBatches(result *[]*model.CorporationDepartment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c corporationDepartmentDo) Attrs(attrs ...field.AssignExpr) *corporationDepartmentDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c corporationDepartmentDo) Assign(attrs ...field.AssignExpr) *corporationDepartmentDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c corporationDepartmentDo) Joins(fields ...field.RelationField) *corporationDepartmentDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c corporationDepartmentDo) Preload(fields ...field.RelationField) *corporationDepartmentDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c corporationDepartmentDo) FirstOrInit() (*model.CorporationDepartment, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CorporationDepartment), nil
	}
}

func (c corporationDepartmentDo) FirstOrCreate() (*model.CorporationDepartment, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CorporationDepartment), nil
	}
}

func (c corporationDepartmentDo) FindByPage(offset int, limit int) (result []*model.CorporationDepartment, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c corporationDepartmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c corporationDepartmentDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c corporationDepartmentDo) Delete(models ...*model.CorporationDepartment) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *corporationDepartmentDo) withDO(do gen.Dao) *corporationDepartmentDo {
	c.DO = *do.(*gen.DO)
	return c
}
