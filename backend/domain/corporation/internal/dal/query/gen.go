/*
 * Copyright 2025 coze-plus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                             = new(Query)
	Corporation                   *corporation
	CorporationDepartment         *corporationDepartment
	CorporationEmployee           *corporationEmployee
	CorporationEmployeeDepartment *corporationEmployeeDepartment
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Corporation = &Q.Corporation
	CorporationDepartment = &Q.CorporationDepartment
	CorporationEmployee = &Q.CorporationEmployee
	CorporationEmployeeDepartment = &Q.CorporationEmployeeDepartment
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                            db,
		Corporation:                   newCorporation(db, opts...),
		CorporationDepartment:         newCorporationDepartment(db, opts...),
		CorporationEmployee:           newCorporationEmployee(db, opts...),
		CorporationEmployeeDepartment: newCorporationEmployeeDepartment(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Corporation                   corporation
	CorporationDepartment         corporationDepartment
	CorporationEmployee           corporationEmployee
	CorporationEmployeeDepartment corporationEmployeeDepartment
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                            db,
		Corporation:                   q.Corporation.clone(db),
		CorporationDepartment:         q.CorporationDepartment.clone(db),
		CorporationEmployee:           q.CorporationEmployee.clone(db),
		CorporationEmployeeDepartment: q.CorporationEmployeeDepartment.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                            db,
		Corporation:                   q.Corporation.replaceDB(db),
		CorporationDepartment:         q.CorporationDepartment.replaceDB(db),
		CorporationEmployee:           q.CorporationEmployee.replaceDB(db),
		CorporationEmployeeDepartment: q.CorporationEmployeeDepartment.replaceDB(db),
	}
}

type queryCtx struct {
	Corporation                   ICorporationDo
	CorporationDepartment         ICorporationDepartmentDo
	CorporationEmployee           ICorporationEmployeeDo
	CorporationEmployeeDepartment ICorporationEmployeeDepartmentDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Corporation:                   q.Corporation.WithContext(ctx),
		CorporationDepartment:         q.CorporationDepartment.WithContext(ctx),
		CorporationEmployee:           q.CorporationEmployee.WithContext(ctx),
		CorporationEmployeeDepartment: q.CorporationEmployeeDepartment.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
