/*
 * Copyright 2025 coze-plus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-studio/backend/domain/corporation/internal/dal/model"
)

func newCorporationEmployeeDepartment(db *gorm.DB, opts ...gen.DOOption) corporationEmployeeDepartment {
	_corporationEmployeeDepartment := corporationEmployeeDepartment{}

	_corporationEmployeeDepartment.corporationEmployeeDepartmentDo.UseDB(db, opts...)
	_corporationEmployeeDepartment.corporationEmployeeDepartmentDo.UseModel(&model.CorporationEmployeeDepartment{})

	tableName := _corporationEmployeeDepartment.corporationEmployeeDepartmentDo.TableName()
	_corporationEmployeeDepartment.ALL = field.NewAsterisk(tableName)
	_corporationEmployeeDepartment.ID = field.NewInt64(tableName, "id")
	_corporationEmployeeDepartment.EmployeeID = field.NewInt64(tableName, "employee_id")
	_corporationEmployeeDepartment.DepartmentID = field.NewInt64(tableName, "department_id")
	_corporationEmployeeDepartment.CorpID = field.NewInt64(tableName, "corp_id")
	_corporationEmployeeDepartment.JobTitle = field.NewString(tableName, "job_title")
	_corporationEmployeeDepartment.IsPrimary = field.NewInt32(tableName, "is_primary")
	_corporationEmployeeDepartment.Status = field.NewInt32(tableName, "status")
	_corporationEmployeeDepartment.CreatorID = field.NewInt64(tableName, "creator_id")
	_corporationEmployeeDepartment.CreatedAt = field.NewInt64(tableName, "created_at")
	_corporationEmployeeDepartment.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_corporationEmployeeDepartment.DeletedAt = field.NewField(tableName, "deleted_at")

	_corporationEmployeeDepartment.fillFieldMap()

	return _corporationEmployeeDepartment
}

// corporationEmployeeDepartment Employee Department Relationship Table
type corporationEmployeeDepartment struct {
	corporationEmployeeDepartmentDo

	ALL          field.Asterisk
	ID           field.Int64  // Relationship ID
	EmployeeID   field.Int64  // Employee ID
	DepartmentID field.Int64  // Department ID
	CorpID       field.Int64  // Corporation ID (department's corporation)
	JobTitle     field.String // Job Title
	IsPrimary    field.Int32  // Is Primary Department: 0-No, 1-Yes
	Status       field.Int32  // Status: 1-Active, 2-Transferred
	CreatorID    field.Int64  // Creator ID
	CreatedAt    field.Int64  // Create Time in Milliseconds
	UpdatedAt    field.Int64  // Update Time in Milliseconds
	DeletedAt    field.Field  // Deletion timestamp

	fieldMap map[string]field.Expr
}

func (c corporationEmployeeDepartment) Table(newTableName string) *corporationEmployeeDepartment {
	c.corporationEmployeeDepartmentDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c corporationEmployeeDepartment) As(alias string) *corporationEmployeeDepartment {
	c.corporationEmployeeDepartmentDo.DO = *(c.corporationEmployeeDepartmentDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *corporationEmployeeDepartment) updateTableName(table string) *corporationEmployeeDepartment {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.EmployeeID = field.NewInt64(table, "employee_id")
	c.DepartmentID = field.NewInt64(table, "department_id")
	c.CorpID = field.NewInt64(table, "corp_id")
	c.JobTitle = field.NewString(table, "job_title")
	c.IsPrimary = field.NewInt32(table, "is_primary")
	c.Status = field.NewInt32(table, "status")
	c.CreatorID = field.NewInt64(table, "creator_id")
	c.CreatedAt = field.NewInt64(table, "created_at")
	c.UpdatedAt = field.NewInt64(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *corporationEmployeeDepartment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *corporationEmployeeDepartment) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 11)
	c.fieldMap["id"] = c.ID
	c.fieldMap["employee_id"] = c.EmployeeID
	c.fieldMap["department_id"] = c.DepartmentID
	c.fieldMap["corp_id"] = c.CorpID
	c.fieldMap["job_title"] = c.JobTitle
	c.fieldMap["is_primary"] = c.IsPrimary
	c.fieldMap["status"] = c.Status
	c.fieldMap["creator_id"] = c.CreatorID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c corporationEmployeeDepartment) clone(db *gorm.DB) corporationEmployeeDepartment {
	c.corporationEmployeeDepartmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c corporationEmployeeDepartment) replaceDB(db *gorm.DB) corporationEmployeeDepartment {
	c.corporationEmployeeDepartmentDo.ReplaceDB(db)
	return c
}

type corporationEmployeeDepartmentDo struct{ gen.DO }

type ICorporationEmployeeDepartmentDo interface {
	gen.SubQuery
	Debug() ICorporationEmployeeDepartmentDo
	WithContext(ctx context.Context) ICorporationEmployeeDepartmentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICorporationEmployeeDepartmentDo
	WriteDB() ICorporationEmployeeDepartmentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICorporationEmployeeDepartmentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICorporationEmployeeDepartmentDo
	Not(conds ...gen.Condition) ICorporationEmployeeDepartmentDo
	Or(conds ...gen.Condition) ICorporationEmployeeDepartmentDo
	Select(conds ...field.Expr) ICorporationEmployeeDepartmentDo
	Where(conds ...gen.Condition) ICorporationEmployeeDepartmentDo
	Order(conds ...field.Expr) ICorporationEmployeeDepartmentDo
	Distinct(cols ...field.Expr) ICorporationEmployeeDepartmentDo
	Omit(cols ...field.Expr) ICorporationEmployeeDepartmentDo
	Join(table schema.Tabler, on ...field.Expr) ICorporationEmployeeDepartmentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICorporationEmployeeDepartmentDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICorporationEmployeeDepartmentDo
	Group(cols ...field.Expr) ICorporationEmployeeDepartmentDo
	Having(conds ...gen.Condition) ICorporationEmployeeDepartmentDo
	Limit(limit int) ICorporationEmployeeDepartmentDo
	Offset(offset int) ICorporationEmployeeDepartmentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICorporationEmployeeDepartmentDo
	Unscoped() ICorporationEmployeeDepartmentDo
	Create(values ...*model.CorporationEmployeeDepartment) error
	CreateInBatches(values []*model.CorporationEmployeeDepartment, batchSize int) error
	Save(values ...*model.CorporationEmployeeDepartment) error
	First() (*model.CorporationEmployeeDepartment, error)
	Take() (*model.CorporationEmployeeDepartment, error)
	Last() (*model.CorporationEmployeeDepartment, error)
	Find() ([]*model.CorporationEmployeeDepartment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CorporationEmployeeDepartment, err error)
	FindInBatches(result *[]*model.CorporationEmployeeDepartment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CorporationEmployeeDepartment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICorporationEmployeeDepartmentDo
	Assign(attrs ...field.AssignExpr) ICorporationEmployeeDepartmentDo
	Joins(fields ...field.RelationField) ICorporationEmployeeDepartmentDo
	Preload(fields ...field.RelationField) ICorporationEmployeeDepartmentDo
	FirstOrInit() (*model.CorporationEmployeeDepartment, error)
	FirstOrCreate() (*model.CorporationEmployeeDepartment, error)
	FindByPage(offset int, limit int) (result []*model.CorporationEmployeeDepartment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICorporationEmployeeDepartmentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c corporationEmployeeDepartmentDo) Debug() ICorporationEmployeeDepartmentDo {
	return c.withDO(c.DO.Debug())
}

func (c corporationEmployeeDepartmentDo) WithContext(ctx context.Context) ICorporationEmployeeDepartmentDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c corporationEmployeeDepartmentDo) ReadDB() ICorporationEmployeeDepartmentDo {
	return c.Clauses(dbresolver.Read)
}

func (c corporationEmployeeDepartmentDo) WriteDB() ICorporationEmployeeDepartmentDo {
	return c.Clauses(dbresolver.Write)
}

func (c corporationEmployeeDepartmentDo) Session(config *gorm.Session) ICorporationEmployeeDepartmentDo {
	return c.withDO(c.DO.Session(config))
}

func (c corporationEmployeeDepartmentDo) Clauses(conds ...clause.Expression) ICorporationEmployeeDepartmentDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c corporationEmployeeDepartmentDo) Returning(value interface{}, columns ...string) ICorporationEmployeeDepartmentDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c corporationEmployeeDepartmentDo) Not(conds ...gen.Condition) ICorporationEmployeeDepartmentDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c corporationEmployeeDepartmentDo) Or(conds ...gen.Condition) ICorporationEmployeeDepartmentDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c corporationEmployeeDepartmentDo) Select(conds ...field.Expr) ICorporationEmployeeDepartmentDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c corporationEmployeeDepartmentDo) Where(conds ...gen.Condition) ICorporationEmployeeDepartmentDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c corporationEmployeeDepartmentDo) Order(conds ...field.Expr) ICorporationEmployeeDepartmentDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c corporationEmployeeDepartmentDo) Distinct(cols ...field.Expr) ICorporationEmployeeDepartmentDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c corporationEmployeeDepartmentDo) Omit(cols ...field.Expr) ICorporationEmployeeDepartmentDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c corporationEmployeeDepartmentDo) Join(table schema.Tabler, on ...field.Expr) ICorporationEmployeeDepartmentDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c corporationEmployeeDepartmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICorporationEmployeeDepartmentDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c corporationEmployeeDepartmentDo) RightJoin(table schema.Tabler, on ...field.Expr) ICorporationEmployeeDepartmentDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c corporationEmployeeDepartmentDo) Group(cols ...field.Expr) ICorporationEmployeeDepartmentDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c corporationEmployeeDepartmentDo) Having(conds ...gen.Condition) ICorporationEmployeeDepartmentDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c corporationEmployeeDepartmentDo) Limit(limit int) ICorporationEmployeeDepartmentDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c corporationEmployeeDepartmentDo) Offset(offset int) ICorporationEmployeeDepartmentDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c corporationEmployeeDepartmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICorporationEmployeeDepartmentDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c corporationEmployeeDepartmentDo) Unscoped() ICorporationEmployeeDepartmentDo {
	return c.withDO(c.DO.Unscoped())
}

func (c corporationEmployeeDepartmentDo) Create(values ...*model.CorporationEmployeeDepartment) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c corporationEmployeeDepartmentDo) CreateInBatches(values []*model.CorporationEmployeeDepartment, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c corporationEmployeeDepartmentDo) Save(values ...*model.CorporationEmployeeDepartment) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c corporationEmployeeDepartmentDo) First() (*model.CorporationEmployeeDepartment, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CorporationEmployeeDepartment), nil
	}
}

func (c corporationEmployeeDepartmentDo) Take() (*model.CorporationEmployeeDepartment, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CorporationEmployeeDepartment), nil
	}
}

func (c corporationEmployeeDepartmentDo) Last() (*model.CorporationEmployeeDepartment, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CorporationEmployeeDepartment), nil
	}
}

func (c corporationEmployeeDepartmentDo) Find() ([]*model.CorporationEmployeeDepartment, error) {
	result, err := c.DO.Find()
	return result.([]*model.CorporationEmployeeDepartment), err
}

func (c corporationEmployeeDepartmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CorporationEmployeeDepartment, err error) {
	buf := make([]*model.CorporationEmployeeDepartment, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c corporationEmployeeDepartmentDo) FindInBatches(result *[]*model.CorporationEmployeeDepartment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c corporationEmployeeDepartmentDo) Attrs(attrs ...field.AssignExpr) ICorporationEmployeeDepartmentDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c corporationEmployeeDepartmentDo) Assign(attrs ...field.AssignExpr) ICorporationEmployeeDepartmentDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c corporationEmployeeDepartmentDo) Joins(fields ...field.RelationField) ICorporationEmployeeDepartmentDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c corporationEmployeeDepartmentDo) Preload(fields ...field.RelationField) ICorporationEmployeeDepartmentDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c corporationEmployeeDepartmentDo) FirstOrInit() (*model.CorporationEmployeeDepartment, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CorporationEmployeeDepartment), nil
	}
}

func (c corporationEmployeeDepartmentDo) FirstOrCreate() (*model.CorporationEmployeeDepartment, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CorporationEmployeeDepartment), nil
	}
}

func (c corporationEmployeeDepartmentDo) FindByPage(offset int, limit int) (result []*model.CorporationEmployeeDepartment, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c corporationEmployeeDepartmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c corporationEmployeeDepartmentDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c corporationEmployeeDepartmentDo) Delete(models ...*model.CorporationEmployeeDepartment) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *corporationEmployeeDepartmentDo) withDO(do gen.Dao) *corporationEmployeeDepartmentDo {
	c.DO = *do.(*gen.DO)
	return c
}
