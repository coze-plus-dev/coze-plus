/*
 * Copyright 2025 coze-plus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-studio/backend/domain/permission/internal/dal/model"
)

func newPermissionTemplate(db *gorm.DB, opts ...gen.DOOption) permissionTemplate {
	_permissionTemplate := permissionTemplate{}

	_permissionTemplate.permissionTemplateDo.UseDB(db, opts...)
	_permissionTemplate.permissionTemplateDo.UseModel(&model.PermissionTemplate{})

	tableName := _permissionTemplate.permissionTemplateDo.TableName()
	_permissionTemplate.ALL = field.NewAsterisk(tableName)
	_permissionTemplate.ID = field.NewInt64(tableName, "id")
	_permissionTemplate.TemplateCode = field.NewString(tableName, "template_code")
	_permissionTemplate.TemplateName = field.NewString(tableName, "template_name")
	_permissionTemplate.Domain = field.NewString(tableName, "domain")
	_permissionTemplate.Resource = field.NewString(tableName, "resource")
	_permissionTemplate.ResourceName = field.NewString(tableName, "resource_name")
	_permissionTemplate.Action = field.NewString(tableName, "action")
	_permissionTemplate.ActionName = field.NewString(tableName, "action_name")
	_permissionTemplate.Description = field.NewString(tableName, "description")
	_permissionTemplate.IsDefault = field.NewInt32(tableName, "is_default")
	_permissionTemplate.SortOrder = field.NewInt32(tableName, "sort_order")
	_permissionTemplate.IsActive = field.NewInt32(tableName, "is_active")
	_permissionTemplate.CreatedAt = field.NewInt64(tableName, "created_at")
	_permissionTemplate.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_permissionTemplate.fillFieldMap()

	return _permissionTemplate
}

// permissionTemplate Permission template table
type permissionTemplate struct {
	permissionTemplateDo permissionTemplateDo

	ALL          field.Asterisk
	ID           field.Int64  // Template ID
	TemplateCode field.String // Template code
	TemplateName field.String // Template name
	Domain       field.String // Permission domain: global-Global permissions, space-Space permissions
	Resource     field.String // Resource type: agent, workflow, knowledge etc
	ResourceName field.String // Resource Chinese name
	Action       field.String // Action type: create, read, update, delete etc
	ActionName   field.String // Action Chinese name
	Description  field.String // Permission description
	IsDefault    field.Int32  // Is default enabled: 0-No, 1-Yes
	SortOrder    field.Int32  // Sort weight
	IsActive     field.Int32  // Is active: 0-Disabled, 1-Enabled
	CreatedAt    field.Int64  // Creation time
	UpdatedAt    field.Int64  // Update time

	fieldMap map[string]field.Expr
}

func (p permissionTemplate) Table(newTableName string) *permissionTemplate {
	p.permissionTemplateDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p permissionTemplate) As(alias string) *permissionTemplate {
	p.permissionTemplateDo.DO = *(p.permissionTemplateDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *permissionTemplate) updateTableName(table string) *permissionTemplate {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.TemplateCode = field.NewString(table, "template_code")
	p.TemplateName = field.NewString(table, "template_name")
	p.Domain = field.NewString(table, "domain")
	p.Resource = field.NewString(table, "resource")
	p.ResourceName = field.NewString(table, "resource_name")
	p.Action = field.NewString(table, "action")
	p.ActionName = field.NewString(table, "action_name")
	p.Description = field.NewString(table, "description")
	p.IsDefault = field.NewInt32(table, "is_default")
	p.SortOrder = field.NewInt32(table, "sort_order")
	p.IsActive = field.NewInt32(table, "is_active")
	p.CreatedAt = field.NewInt64(table, "created_at")
	p.UpdatedAt = field.NewInt64(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *permissionTemplate) WithContext(ctx context.Context) *permissionTemplateDo {
	return p.permissionTemplateDo.WithContext(ctx)
}

func (p permissionTemplate) TableName() string { return p.permissionTemplateDo.TableName() }

func (p permissionTemplate) Alias() string { return p.permissionTemplateDo.Alias() }

func (p permissionTemplate) Columns(cols ...field.Expr) gen.Columns {
	return p.permissionTemplateDo.Columns(cols...)
}

func (p *permissionTemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *permissionTemplate) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 14)
	p.fieldMap["id"] = p.ID
	p.fieldMap["template_code"] = p.TemplateCode
	p.fieldMap["template_name"] = p.TemplateName
	p.fieldMap["domain"] = p.Domain
	p.fieldMap["resource"] = p.Resource
	p.fieldMap["resource_name"] = p.ResourceName
	p.fieldMap["action"] = p.Action
	p.fieldMap["action_name"] = p.ActionName
	p.fieldMap["description"] = p.Description
	p.fieldMap["is_default"] = p.IsDefault
	p.fieldMap["sort_order"] = p.SortOrder
	p.fieldMap["is_active"] = p.IsActive
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p permissionTemplate) clone(db *gorm.DB) permissionTemplate {
	p.permissionTemplateDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p permissionTemplate) replaceDB(db *gorm.DB) permissionTemplate {
	p.permissionTemplateDo.ReplaceDB(db)
	return p
}

type permissionTemplateDo struct{ gen.DO }

func (p permissionTemplateDo) Debug() *permissionTemplateDo {
	return p.withDO(p.DO.Debug())
}

func (p permissionTemplateDo) WithContext(ctx context.Context) *permissionTemplateDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p permissionTemplateDo) ReadDB() *permissionTemplateDo {
	return p.Clauses(dbresolver.Read)
}

func (p permissionTemplateDo) WriteDB() *permissionTemplateDo {
	return p.Clauses(dbresolver.Write)
}

func (p permissionTemplateDo) Session(config *gorm.Session) *permissionTemplateDo {
	return p.withDO(p.DO.Session(config))
}

func (p permissionTemplateDo) Clauses(conds ...clause.Expression) *permissionTemplateDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p permissionTemplateDo) Returning(value interface{}, columns ...string) *permissionTemplateDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p permissionTemplateDo) Not(conds ...gen.Condition) *permissionTemplateDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p permissionTemplateDo) Or(conds ...gen.Condition) *permissionTemplateDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p permissionTemplateDo) Select(conds ...field.Expr) *permissionTemplateDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p permissionTemplateDo) Where(conds ...gen.Condition) *permissionTemplateDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p permissionTemplateDo) Order(conds ...field.Expr) *permissionTemplateDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p permissionTemplateDo) Distinct(cols ...field.Expr) *permissionTemplateDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p permissionTemplateDo) Omit(cols ...field.Expr) *permissionTemplateDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p permissionTemplateDo) Join(table schema.Tabler, on ...field.Expr) *permissionTemplateDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p permissionTemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) *permissionTemplateDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p permissionTemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) *permissionTemplateDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p permissionTemplateDo) Group(cols ...field.Expr) *permissionTemplateDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p permissionTemplateDo) Having(conds ...gen.Condition) *permissionTemplateDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p permissionTemplateDo) Limit(limit int) *permissionTemplateDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p permissionTemplateDo) Offset(offset int) *permissionTemplateDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p permissionTemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *permissionTemplateDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p permissionTemplateDo) Unscoped() *permissionTemplateDo {
	return p.withDO(p.DO.Unscoped())
}

func (p permissionTemplateDo) Create(values ...*model.PermissionTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p permissionTemplateDo) CreateInBatches(values []*model.PermissionTemplate, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p permissionTemplateDo) Save(values ...*model.PermissionTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p permissionTemplateDo) First() (*model.PermissionTemplate, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PermissionTemplate), nil
	}
}

func (p permissionTemplateDo) Take() (*model.PermissionTemplate, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PermissionTemplate), nil
	}
}

func (p permissionTemplateDo) Last() (*model.PermissionTemplate, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PermissionTemplate), nil
	}
}

func (p permissionTemplateDo) Find() ([]*model.PermissionTemplate, error) {
	result, err := p.DO.Find()
	return result.([]*model.PermissionTemplate), err
}

func (p permissionTemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PermissionTemplate, err error) {
	buf := make([]*model.PermissionTemplate, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p permissionTemplateDo) FindInBatches(result *[]*model.PermissionTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p permissionTemplateDo) Attrs(attrs ...field.AssignExpr) *permissionTemplateDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p permissionTemplateDo) Assign(attrs ...field.AssignExpr) *permissionTemplateDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p permissionTemplateDo) Joins(fields ...field.RelationField) *permissionTemplateDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p permissionTemplateDo) Preload(fields ...field.RelationField) *permissionTemplateDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p permissionTemplateDo) FirstOrInit() (*model.PermissionTemplate, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PermissionTemplate), nil
	}
}

func (p permissionTemplateDo) FirstOrCreate() (*model.PermissionTemplate, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PermissionTemplate), nil
	}
}

func (p permissionTemplateDo) FindByPage(offset int, limit int) (result []*model.PermissionTemplate, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p permissionTemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p permissionTemplateDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p permissionTemplateDo) Delete(models ...*model.PermissionTemplate) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *permissionTemplateDo) withDO(do gen.Dao) *permissionTemplateDo {
	p.DO = *do.(*gen.DO)
	return p
}
